{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\controller\\login.js"
    ],
    "names": [
        "indexAction",
        "session",
        "uinfo",
        "think",
        "isEmpty",
        "redirect",
        "name",
        "assign",
        "displayView",
        "dologinAction",
        "data",
        "post",
        "code",
        "sysCode",
        "md5",
        "password",
        "md5Pas",
        "email",
        "model",
        "findOne",
        "result",
        "Geetest",
        "service",
        "geetest",
        "validate",
        "res",
        "status",
        "json",
        "errno",
        "errmsg",
        "uInfo",
        "pic",
        "nickname",
        "openid",
        "way",
        "uname",
        "githubAction",
        "self",
        "GITHUB_CLIENT_ID",
        "GITHUB_CLIENT_SECRET",
        "get",
        "formData",
        "client_id",
        "client_secret",
        "url",
        "form",
        "headers",
        "Accept",
        "err",
        "res1",
        "body",
        "access_token",
        "JSON",
        "parse",
        "headers2",
        "qs",
        "res2",
        "info",
        "login",
        "id",
        "qqloginAction",
        "QQ_CLIENT_ID",
        "QQ_CLIENT_SECRET",
        "REDIRECT_URI",
        "QQ_grant_type",
        "grant_type",
        "redirect_uri",
        "match",
        "oauth_consumer_key",
        "format",
        "completeAction",
        "DB_userinfo"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\home\\controller\\login.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base.js';\nimport request from \"request\";\nexport default class extends Base {\n\n    //用户登录\n    async indexAction(){\n      let uinfo=await this.session('uInfo');\n      if(!think.isEmpty(uinfo)){\n        return this.redirect('/personal/@'+uinfo.name);\n      }else {\n        this.assign(\"title\",\"用户登录\");\n        return this.displayView(\"login_index\");\n\n      }\n    }\n    async dologinAction(){\n      let data=this.post();\n      let code=data.code;\n      let sysCode=await this.session('code');\n      // code=code.toLowerCase();\n      // sysCode=sysCode.toLowerCase();\n      let md5Pas = await think.md5(data.password);\n      let email = await data.email;\n      let result=await this.model('home').findOne('user',{email:email});\n      if(email===result.email&&md5Pas===result.password){\n\n          let Geetest = think.service(\"geetest\"); //加载 commoon 模块下的 geetset service\n          let geetest = new Geetest();\n          let res = await geetest.validate(this.post());\n          if(\"success\" != res.status){\n              return this.json({status:0,errno:2,errmsg:\"验证码错误!\"});\n          }else{\n            let uInfo={\n                email:email,\n                pic:result.pic,\n                name:result.name,\n                nickname:result.nickname,\n                openid:'',\n                way:'site'\n              }\n            await this.session(\"uInfo\", uInfo);\n            return this.json({status:1,errno:0,uname:result.name,errmsg:\"登录成功!\"});\n          }\n      }else{\n          return this.json({status:0,errno:1,errmsg:\"用户名或密码错误!\"});\n      }\n    }\n\n    async githubAction(){\n        let self=this;\n        let GITHUB_CLIENT_ID=\"776342f65de13d9b3df4\",\n            GITHUB_CLIENT_SECRET=\"080784f5209b1dc0d934e66eeab8013c4e68735c\";\n\n        let code=await this.get('code');\n        let formData = {\n          client_id: GITHUB_CLIENT_ID,\n          client_secret: GITHUB_CLIENT_SECRET,\n          code: code\n        };\n\n        request.post({\n            url: 'https://github.com/login/oauth/access_token',\n            form: formData,\n            headers: {Accept: 'application/json'}\n          }, function (err, res1, body) {\n\n            var access_token = JSON.parse(body).access_token;\n            var headers2 = {\n              'User-Agent': 'Awesome-Octocat-App'\n            };\n            request.get({\n              url: 'https://api.github.com/user',\n              qs: {access_token: access_token},\n              headers: headers2\n            }, function (err, res2, body) {\n            let info = JSON.parse(body);\n            let uInfo={\n                email:info.email,\n                pic:'',\n                name:'',\n                nickname:info.login,\n                openid:info.id,\n                way:'github'\n              }\n              self.session(\"uInfo\",uInfo);\n              self.redirect(\"/login/complete\");\n            });\n        });\n    }\n    async qqloginAction(){\n        let self=this;\n\n        let QQ_CLIENT_ID = \"101334443\";\n        let QQ_CLIENT_SECRET = \"ace474e949764ac84a9faeb8f99ae4c6\";\n        let REDIRECT_URI = \"http://www.jsout.com/login/qqlogin\";\n        let QQ_grant_type = \"authorization_code\";\n        //注意:回填地址, 因为QQ不允许像github一样填http://127.0.0.1:3000的开发者模式,\n        // https://graph.qq.com/oauth2.0/authorize?redirect_uri=' + REDIRECT_URI + '&response_type=code&client_id=' + QQ_CLIENT_ID\n\n        let code=await this.get('code');\n        let qs = {\n              grant_type: 'authorization_code',\n              client_id: QQ_CLIENT_ID,\n              client_secret: QQ_CLIENT_SECRET,\n              code: code,\n              redirect_uri: REDIRECT_URI\n            };\n        request.get({\n            url: 'https://graph.qq.com/oauth2.0/token',\n            qs: qs\n          }, function (err, res1, body) {\n            let access_token = body.match(/access_token=(\\w+)&?/)[1];\n            request.get({\n              url: 'https://graph.qq.com/oauth2.0/me',\n              qs: {access_token: access_token}\n            }, function (err, res2, body) {\n                  let openid = body.match(/\"openid\":\"(\\w+)\"/)[1];\n                  let qs = {\n                    oauth_consumer_key: QQ_CLIENT_ID,\n                    access_token: access_token,\n                    openid: openid,\n                    format: 'json'\n                  };\n                  // 获取用户信息\n                    request.get({\n                        url: 'https://graph.qq.com/user/get_user_info',\n                        qs: qs\n                        }, function (err, res2, body) {\n                        let info = JSON.parse(body);\n                        let uInfo={\n                            email:'',\n                            pic:'',\n                            name:'',\n                            nickname:info.nickname,\n                            openid:openid,\n                            way:'qq'\n                          }\n                          self.session(\"uInfo\",uInfo);\n                          self.redirect(\"/login/complete\");\n                  });\n              });\n        });\n    }\n\n    async completeAction(){\n      this.assign('title','完善资料')\n      let uinfo=await this.session(\"uInfo\");\n      if(think.isEmpty(uinfo)){\n          return this.redirect(\"/login.html\");\n      }else{\n        //查询是否已经注册过\n        let DB_userinfo=await this.model('home').findOne('user',{openid:uinfo.openid});\n        //未注册\n        if(think.isEmpty(DB_userinfo)){\n          this.assign(\"uinfo\",uinfo);\n          return this.displayView(\"login_complete\");\n        }else{\n          //已注册\n          uinfo.name=DB_userinfo.name;\n          return this.redirect(\"/personal/@\"+DB_userinfo.name);\n        }\n      }\n    }\n}\n"
    ]
}