{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\controller\\register.js"
    ],
    "names": [
        "http",
        "require",
        "fs",
        "indexAction",
        "session",
        "uinfo",
        "think",
        "isEmpty",
        "redirect",
        "name",
        "assign",
        "displayView",
        "doregisterAction",
        "newData",
        "post",
        "password",
        "md5",
        "email",
        "createtime",
        "datetime",
        "checkIsExist",
        "s",
        "userFlag",
        "emailFlag",
        "json",
        "status",
        "errno",
        "errmsg",
        "Geetest",
        "service",
        "geetest",
        "validate",
        "res",
        "model",
        "addUser",
        "rs",
        "uInfo",
        "pic",
        "nickname",
        "openid",
        "way",
        "success",
        "fail",
        "adduserAction",
        "where",
        "findUser",
        "length",
        "isexistAction",
        "checkemailAction",
        "geetestAction",
        "isPost",
        "register",
        "get"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\home\\controller\\register.js",
    "sourcesContent": [
        "'use strict';\r\nlet http = require(\"http\");\r\nlet fs = require(\"fs\");\r\nimport Base from './base.js';\r\nexport default class extends Base {\r\n\r\n    // 注册页面\r\n    async indexAction(){\r\n\r\n      let uinfo=await this.session('uInfo');\r\n      if(!think.isEmpty(uinfo)){\r\n        //已注册并登录\r\n        return this.redirect('/personal/@'+uinfo.name);\r\n      }else {\r\n        this.assign(\"title\",\"会员注册\");\r\n        return this.displayView(\"register_index\");\r\n      }\r\n    }\r\n    //注册接口\r\n    async doregisterAction(){\r\n        let newData=this.post();\r\n            newData.password=think.md5(newData.password);\r\n        // 后台校验\r\n        let name=newData.name;\r\n        let password=newData.password;\r\n        let email=newData.email;\r\n        newData.createtime=think.datetime(this.post('createtime'));\r\n        if(name!==''&&password!==''&&email!==''){\r\n          //校验用户是否存在\r\n          let s=await this.checkIsExist({name:name})\r\n          let userFlag=await this.checkIsExist({name:name});\r\n          let emailFlag=await this.checkIsExist({email:email});\r\n          if(userFlag===0){\r\n            return this.json({status:0,errno:1,errmsg:'该用户名已存在！'});\r\n          }else if(emailFlag===0){\r\n            return this.json({status:0,errno:1,errmsg:'该邮箱已存在！'});\r\n          }else{\r\n\r\n            let Geetest = think.service(\"geetest\"); //加载 commoon 模块下的 geetset service\r\n            let geetest = new Geetest();\r\n            let res = await geetest.validate(this.post());\r\n            if(\"success\" != res.status){\r\n                return this.json({status:0,errno:2,errmsg:\"验证码错误!\"});\r\n            }else{\r\n                let rs=await this.model('home').addUser(newData);\r\n                let uInfo={\r\n                    email:email,\r\n                    pic:'',\r\n                    name:name,\r\n                    nickname:'',\r\n                    openid:'',\r\n                    way:'site'\r\n                  }\r\n                await this.session(\"uInfo\", uInfo);\r\n                if(rs) return this.success();\r\n            }\r\n          }\r\n        }else{\r\n          return this.fail('请填写必要信息！');\r\n        }\r\n    }\r\n    // 获取网络头像并保存\r\n    // async getpicAction(){\r\n    //     let url=\"http://www.jsout.com/static/common/images/common/logo.jpg\";\r\n    //     http.get(url, function(res){\r\n    //           var imgData = \"\";\r\n    //           res.setEncoding(\"binary\"); //一定要设置response的编码为binary否则会下载下来的图片打不开\r\n    //           res.on(\"data\", function(chunk){\r\n    //               imgData+=chunk;\r\n    //           });\r\n    //           console.log(url);\r\n    //           res.on(\"end\", function(){\r\n    //               let mypath=think.RESOURCE_PATH+\"/static/common/images/pic/logonew.png\"\r\n    //               fs.writeFile(mypath, imgData, \"binary\", function(err){\r\n    //                   if(err){\r\n    //                       console.log(err);\r\n    //                   }else {\r\n    //                     return mypath;\r\n    //                   }\r\n    //                   // console.log(\"down success\");\r\n    //               });\r\n    //           });\r\n    //       });\r\n    // }\r\n    async adduserAction(){\r\n        let newData=this.post();\r\n        // 后台校验\r\n        let name=newData.name;\r\n        let email=newData.email;\r\n        let nickname=newData.nickname;\r\n        let openid=newData.openid;\r\n        newData.createtime=think.datetime(this.post('createtime'));\r\n        if(name!==''&&nickname!==''&&email!==''&&openid!==''){\r\n          //校验用户是否存在\r\n          let s=await this.checkIsExist({name:name})\r\n          if(s===0){\r\n            return this.json({status:0,errno:1,errmsg:'该用户名已存在！'});\r\n          }else{\r\n              let rs=await this.model('home').addUser(newData);\r\n              //设置session\r\n              let uinfo=await this.session('uInfo');\r\n              uinfo.name=name;\r\n              if(rs){return this.success();}\r\n          }\r\n        }else{\r\n          return this.fail('请填写必要信息！');\r\n        }\r\n    }\r\n\r\n    //检查是否存在\r\n    async checkIsExist(where){\r\n        let rs= await this.model('home').findUser(where);\r\n        let s=(rs.length>0)?0:1;\r\n        return s;\r\n    }\r\n\r\n    //校验注册用户名是否存在\r\n    async isexistAction(){\r\n      let name=await this.post('name');\r\n      let s=await this.checkIsExist({name:name});\r\n      if(s==1){\r\n        return this.json({status:1,errno:0,errmsg:'用户名可用！'});\r\n      }else{\r\n        return this.json({status:0,errno:1,errmsg:'该用户名已存在！'});\r\n      }\r\n    }\r\n\r\n    //校验邮箱是否存在\r\n    async checkemailAction(){\r\n      let email=await this.post('email');\r\n      let s=await this.checkIsExist({'email':email});\r\n      if(s==1){\r\n        return this.json({status:1,errno:0,errmsg:'该邮箱可用！'});\r\n      }else{\r\n        return this.json({status:0,errno:1,errmsg:'该邮箱已存在！'});\r\n      }\r\n    }\r\n\r\n    //极验验证码\r\n    async geetestAction(){\r\n      // pc 端接口\r\n        let Geetest = think.service(\"geetest\"); //加载 commoon 模块下的 geetset service\r\n        let geetest = new Geetest();\r\n        if(this.isPost()){\r\n            let post =this.post();\r\n            let res = await geetest.validate(post);\r\n            return this.json(res);\r\n        }else {\r\n            let res = await geetest.register(this.get('type'));\r\n            return this.json(res);\r\n        }\r\n   }\r\n}\r\n"
    ]
}