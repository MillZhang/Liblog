/*
Navicat MySQL Data Transfer

Source Server         : 滴滴云
Source Server Version : 50639
Source Host           : 116.85.44.204:3306
Source Database       : liblog

Target Server Type    : MYSQL
Target Server Version : 50639
File Encoding         : 65001

Date: 2018-01-30 18:09:45
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for li_article
-- ----------------------------
DROP TABLE IF EXISTS `li_article`;
CREATE TABLE `li_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `abstract` text,
  `content` text NOT NULL,
  `picurl` varchar(255) DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `view` bigint(20) DEFAULT '1',
  `totop` smallint(6) DEFAULT '0',
  `torecom` smallint(6) DEFAULT '0',
  `topicrecom` smallint(6) DEFAULT '0',
  `tag` int(11) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `allowcomment` int(11) DEFAULT '1',
  `ispublished` int(11) DEFAULT '0',
  `from` varchar(255) DEFAULT NULL,
  `item` int(11) DEFAULT NULL,
  `like` int(11) DEFAULT '0' COMMENT '喜欢',
  `flag_a` smallint(255) DEFAULT '0',
  `flag_b` smallint(255) DEFAULT '0',
  `flag_c` smallint(255) DEFAULT '0',
  `flag_d` smallint(255) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=446 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_article
-- ----------------------------
INSERT INTO `li_article` VALUES ('424', 'css盒模型', '', '<h3 id=\"-\">概念</h3>\n<p>盒子模型是css最核心的内容了,理解盒子模型可以更好的对页面进行排版布局.<br>盒子模型又称框模型(Box Model),它是由四要素组成,分别是:</p>\n<ul>\n<li>元素内容(content)</li>\n<li>内边距(padding)</li>\n<li>边框(border)</li>\n<li>外边距(margin)-透明</li>\n</ul>\n<pre><code class=\"lang-js\">//外盒尺寸计算（元素空间尺寸)\nElement空间高度 = content height + padding + border + margin\nElement 空间宽度 = content width + padding + border + margin\n//内盒尺寸计算（元素大小）\nElement Height = content height + padding + border （Height为内容高度）\nElement Width = content width + padding + border\n</code></pre>\n<p>一个标准的盒子模型的示意图:<br><img src=\"http://images2015.cnblogs.com/blog/793040/201511/793040-20151130140140858-2462296.jpg\" alt=\"标准盒子模型\"></p>\n<p>下面我们用一组代码来演示不同的情况,如下图的盒模型:<br><img src=\"http://oritfw5nq.bkt.clouddn.com/20170810134534.png\" alt=\"演示demo\"></p>\n<p>关于元素宽度获取的几种方式,及不同点:</p>\n<ul>\n<li><code>clientWidth</code>:包括元素宽度和padding,不含border的宽度值</li>\n<li><code>offsetWidth</code>: dom元素实际宽度包括border和padding</li>\n<li><code>scrollWidth</code>:对于无滚动元素来讲,同clientWidth,但如果内容出现滚动条,则包括滚动的宽度,也就是说scrollWidth的最小值是clientWidth,其中随内容的宽度而变</li>\n<li><code>$element.width()</code>:jquery元素的宽度,单指元素的宽度</li>\n</ul>\n<blockquote>\n<p><a href=\"http://jsrun.net/StYKp\">代码</a></p>\n</blockquote>\n<h3 id=\"-\">盒模型的叠加</h3>\n<p>两个上下相邻的盒模型,它们的外边距即彼此的<code>margin-bottom</code>和<code>margin-top</code>会合并,合并准则以外边距值较大的为彼此的实际外间距.</p>\n<p>但是上述只针对在普通文档流中的垂直块元素,而行内元素,浮动框或者是绝对定位的元素,它们的外边距不会发生合并.</p>\n<blockquote>\n<p><a href=\"http://jsrun.net/knYKp\">举个栗子</a></p>\n</blockquote>\n<h3 id=\"-ie-\">不得不说IE的怪异盒模型</h3>\n<p><img src=\"http://img.blog.csdn.net/20160429135409319\" alt=\"IE盒子模型\"></p>\n<pre><code class=\"lang-js\"> /*外盒尺寸计算（元素空间尺寸）*/\n  Element空间宽度 = content Width + margin (Width包含了元素内容宽度、边框宽度、内距宽度)\n  /*内盒尺寸计算（元素大小）*/\n  Element Width = content Width(Width包含了元素内容宽度、边框宽度、内距宽度)\n</code></pre>\n<p><strong>what?</strong><br>乍一看跟标准盒模型好像没区别.但是仔细看,结合上图,怪异盒模型元素的宽度就包含了元素内容,border和padding的宽度.还不明白?</p>\n<pre><code class=\"lang-css\">.box{\n  width:200px;\n  height:300px;\n  background:#bc223d;\n  text-align:center;\n  color:#fff;\n  margin:20px;\n  padding:20px;\n  border:3px solid #aaabbb;\n  overflow-x:auto;\n  box-sizing:border-box;//可讲盒模型修改为怪异模型\n}\n</code></pre>\n<pre><code class=\"lang-js\">//怪异模型下元素宽度包括了内容的宽度,padding的宽度和border的宽度\n$(\'.box\').width();//=200-20*2-3*2=154px\n</code></pre>\n<blockquote>\n<p><a href=\"http://jsrun.net/fnYKp\">代码</a></p>\n</blockquote>\n<h3 id=\"box-sizing\">box-sizing</h3>\n<p>理解并掌握上述的两种盒模型,那么<code>box-sizing</code>这个属性相对来说更好理清了,它很好的实现了这两种模型间的互相切换,<code>box-sizing</code>有如下的属性:</p>\n<ul>\n<li><code>content-box</code>: 让元素维持标准盒模型,即:<code>Element Width/Height = border+padding+content width/height</code></li>\n<li><code>border-box</code>: 让元素的宽度/高度等于元素内容的宽度/高度,换言之:此处的内容宽度/高度=width/height-border-padding;</li>\n<li><code>inherit</code>:继承父元素<code>box-sizing</code>的属性值</li>\n</ul>\n<p>继续上代码,直观展现下这两种模型:</p>\n<blockquote>\n<p><a href=\"http://jsrun.net/vnYKp\">点击看代码</a></p>\n</blockquote>\n<h4 id=\"-\">浏览器兼容性</h4>\n<p>现代浏览器基本支持,IE8及以上版本支持该属性，Firefox 需要加上浏览器厂商前缀<code>-moz-</code>，对于低版本的IOS和Android浏览器也需要加上<code>-webkit-</code></p>\n<p><code>boxder-box</code>更直接,更利于开发,所以有了如下的代码:</p>\n<pre><code class=\"lang-css\">*, *:before, *:after {\n　　-moz-box-sizing: border-box;\n　　-webkit-box-sizing: border-box;\n　　box-sizing: border-box;\n}\n</code></pre>\n<h3 id=\"-\">盒模型的应用,画三角</h3>\n<pre><code class=\"lang-css\">.triangle {\n  width:0;\n  height:0;\n  border:100px solid transparent;\n  border-top:100px solid #bc223d;\n}\n</code></pre>\n<blockquote>\n<p><a href=\"http://jsrun.net/anYKp\">代码</a></p>\n</blockquote><p><br></p>', '', 'MillZhang', '2018-01-30 15:42:01', '1', '1', '0', '0', '2', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('425', 'css编码规范', '', '<h3 id=\"-\">编码</h3>\n<p>在 css 首行设置文件编码为 UTF-8。</p>\n<pre><code class=\"lang-css\">@charset \"UTF-8\";\n</code></pre>\n<h3 id=\"class-\">class 命名</h3>\n<ul>\n<li>class 名称应当尽可能短，并且意义明确。使用有意义的名称，使用有组织的或目的明确的名称，不要使用表现形式的名称。</li>\n<li>使用中划线<code>（-）</code>分隔 <code>class</code>中的单词。虽然它很不方便的让你双击选择，但是它可以增强理解性。另外属性选择器<code>[attribute|=value]</code>  也能识别中划线<code>（-）</code>，所以最好坚持使用中划线作为分隔符。</li>\n<li>基于最近的父 <code>class</code> 或基本 <code>class</code> 作为新 <code>class</code> 的前缀。</li>\n<li>使用 <code>.js-*</code> 的 <code>class</code> 来标识行为（与样式相对），并且不要将这些 <code>class</code> 写有任何的样式。</li>\n</ul>\n<h4 id=\"-\">不推荐</h4>\n<pre><code class=\"lang-css\">.red {color:red;} /*无明确含义*/\n.slide_hd {}\n.header .logo {}\n</code></pre>\n<h4 id=\"-\">推荐</h4>\n<pre><code class=\"lang-css\">.important {color:red;}\n.slide-hd {}\n.header-logo {}\n</code></pre>\n<h3 id=\"-\">减少选择器的嵌套</h3>\n<h4 id=\"-\">不推荐</h4>\n<pre><code class=\"lang-css\">.main ul li a span {}\n</code></pre>\n<h4 id=\"-\">推荐</h4>\n<pre><code class=\"lang-css\">.main span {}\n</code></pre>\n<h3 id=\"-\">优化选择器</h3>\n<p>当构建选择器时应该使用清晰，准确和有语义的 <code>class</code> 名。尽量减少使用标签选择器。如果你只关心你的 <code>class</code>名，而不是你的代码元素，这样会更容易维护。</p>\n<h4 id=\"-\">不推荐</h4>\n<pre><code class=\"lang-css\">div.content &gt; header.content-header &gt; h2.title {\n    font-size: 2em;\n}\n</code></pre>\n<h4 id=\"-\">推荐</h4>\n<pre><code class=\"lang-css\">.content &gt; .content-header &gt; .title {\n    font-size: 2em;\n}\n</code></pre>\n<h3 id=\"-0-\">省略 0 后面的单位</h3>\n<h3 id=\"-16-\">使用 16 进制表示颜色值</h3>\n<p>css 中的颜色值可以使用 16 进制来表示，在可能的情况下，可以进行缩写，比如：#fff、#000。</p>\n<h3 id=\"-\">媒体查询的位置</h3>\n<p>将媒体查询放在尽可能相关规则的附近。不要将他们打包放在一个单一样式文件中或者放在文档底部。如果你把他们分开了，将来只会被大家遗忘。</p>\n<h3 id=\"-\">带前缀的属性</h3>\n<p>当使用特定厂商的带有前缀的属性时，通过缩进的方式，让每个属性的值在垂直方向对齐，这样便于多行编辑。</p>\n<pre><code class=\"lang-css\">.selector {\n    -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.15);\n            box-shadow: 0 1px 2px rgba(0,0,0,.15);\n}\n</code></pre>\n<h3 id=\"-\">声明结束</h3>\n<p>为了保证一致性和可扩展性，每个声明应该用分号结束。</p>\n<h3 id=\"-\">多行规则声明</h3>\n<p>为了易读性和便于快速编辑，统一将语句分为多行，即使该样式只包含一条声明</p>\n<h3 id=\"-\">中文字体引用</h3>\n<p>css 中文字体可以用 unicode 格式来表示，比如<code>“宋体”</code>可以用 <code>\\5B8B\\4F53</code> 来表示。</p>\n<h3 id=\"-sass-\">对于 sass 的嵌套</h3>\n<p>在 sass 中你可以嵌套选择器，这可以使代码变得更清洁和可读。嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器。</p>\n<p>如果你需要指定一些子元素的样式属性，而父元素将不什么样式属性，可以使用常规的 css 选择器链，这将防止您的脚本看起来过于复杂。</p>\n<p>当使用 sass 的嵌套功能的时候，重要的是有一个明确的嵌套顺序。</p>\n<ul>\n<li>当前选择器的 @extend 和 @include</li>\n<li>当前选择器的样式属性</li>\n<li>父级选择器的伪类选择器（:first-letter，:hover，:active 等等）</li>\n<li>伪类元素（:before 和 :after）</li>\n<li>父级选择器的声明样式（.selected，.active 等等）</li>\n<li>用 sass 的上下文媒体查询</li>\n<li>子选择器作为最后的部分</li>\n</ul>\n<h4 id=\"-\">推荐</h4>\n<pre><code class=\"lang-css\">\n.test {\n    @extend %clearfix;\n    color:#ccc;\n    &amp;:hover {\n        color:#000;\n    }\n    &amp;:before {\n        border:1px solid #eee;\n        content:\"\";\n    }\n    &amp;.active {\n        color:#f00;\n        &amp;:hover {\n            color:#ff0;\n        }\n    }\n    @media screen and (max-width: 640px) {\n        display:block;\n        font-size:2em;\n    }\n    &gt; .title {\n        font-size:1.2em;\n    }\n}\n</code></pre><p><br></p>', '/static/upload/pics/2018/1/303yEYDU2tpRj9jsNrp8nzxfa_.jpg', 'MillZhang', '2018-01-30 17:05:35', '1', '1', '0', '0', '2', '', '0', '1', '', '2', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('426', 'javascript流水账', 'javascript日常笔记', '<h3 id=\"-object-freeze-\"><code>Object.freeze()</code></h3>\n<p><code>Object.freeze()</code> 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。</p>\n<ul>\n<li>浅冻结</li>\n<li>深冻结</li>\n</ul>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze</a></p>\n</blockquote>\n<h3 id=\"-object-defineproperty-obj-prop-descriptor-\"><code>Object.defineProperty(obj,prop,descriptor)</code></h3>\n<blockquote>\n<p>直接在一个对象上定义一个新的属性,或者修改一个对象的现有属性,并返回这个对象.</p>\n</blockquote>\n<h4 id=\"-\">参数</h4>\n<ul>\n<li><code>obj</code>:目标对象</li>\n<li><code>prop</code>:待定义或修改的属性名称</li>\n<li><code>descriptor</code>:待定义或修改属性的描述符</li>\n</ul>\n<h4 id=\"-\">示例</h4>\n<pre><code class=\"lang-js\">var bValue;\nvar o = {}; // 创建一个新对象\nObject.defineProperty(o, \"b\", {\n  get : function(){\n    return bValue;\n  },\n  set : function(newValue){\n    bValue = newValue;\n  },\n  enumerable : true,\n  configurable : true,\n  writable:true//为false时代表属性\"不可写\"\n});\n</code></pre>\n<h3 id=\"-iife-\"><code>IIFE</code></h3>\n<p>即<strong>立即执行函数表达式</strong></p>\n<h3 id=\"how-to-convert-a-set-to-an-array-\">How to convert a <code>Set</code> to an <code>Array</code>?</h3>\n<pre><code>let setVal = new Set([\'b\',\'c\',\'b\',\'a\']);\n//1.Array.from\nconsole.log(Array.from(setVal));//[b,c,a]\n//2.spread \nconsole.log([...setVal])\n</code></pre><h3 id=\"js-\">js取随机数</h3>\n<pre><code class=\"lang-js\">Math.random()\n</code></pre>\n<h3 id=\"-arguments-\">函数列表参数<code>arguments</code></h3>\n<p>首先,它是一个类数组对象<code>Array-Like Object</code>,就是拥有<code>length</code>属性,但不能使用数组方法(<code>forEach</code>,<code>map</code>);</p>\n<ul>\n<li>将<code>arguments</code>对象转换为数组对象</li>\n</ul>\n<pre><code>//1\narguments = [].slice.call(arguments);\n//2\narguments = Array.from(arguments)\n//3\n[..arguments]\n</code></pre><ul>\n<li><a href=\"https://segmentfault.com/a/1190000008620953\">链接</a></li>\n</ul>\n<h3 id=\"-commonjs-exports-module-exports-\"><code>commonjs</code>中<code>exports</code>与<code>module.exports</code>的区别</h3>\n<p><code>exports</code>对象是通过形参的方式传入的,直接赋值形参会改变形参的引用,但不能改变作用域外的值.<br>而<code>module.exports</code>不改变形参的</p>\n<hr>\n<h3 id=\"es5-array-prototype-reduce-\">ES5内置函数<code>Array.prototype.reduce()</code></h3>\n<blockquote>\n<p>[info] The <code>reduce()</code> method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</p>\n</blockquote>\n<p>该方法是个累加器，适合将数组中的元素从左到右减少到一个单一的值。</p>\n<blockquote>\n<p>[success] <code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></p>\n</blockquote>\n<ul>\n<li><code>total</code>：必需，初始值或计算后的返回值；</li>\n<li><code>currentValue</code>：必需，当前元素；</li>\n<li><code>currentIndex</code>：可选，当前元素的索引；</li>\n<li><code>arr</code> ：可选，当前元素所属的数组对象。</li>\n</ul>\n<pre><code class=\"lang-js\">const array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) =&gt; accumulator + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));\n// expected output: 15\n</code></pre>\n<h4 id=\"-reduceright-\"><code>reduceRight()</code></h4>\n<blockquote>\n<p>[info] The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</p>\n</blockquote>\n<pre><code class=\"lang-js\">const array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(\n  (previousValue, currentValue) =&gt; previousValue.concat(currentValue)\n);\n\nconsole.log(array1);\n// expected output: Array [4, 5, 2, 3, 0, 1]\n</code></pre>\n<h3 id=\"-\">操作位符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>按位与（ AND）</td>\n<td><code>a &amp; b</code></td>\n<td>对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td>\n</tr>\n<tr>\n<td>按位或（OR）</td>\n<td>`a</td>\n<td>b`</td>\n<td>对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。</td>\n</tr>\n<tr>\n<td>按位异或（XOR）</td>\n<td><code>a ^ b</code></td>\n<td>对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td>\n</tr>\n<tr>\n<td>按位非（NOT）</td>\n<td><code>~ a</code></td>\n<td>反转操作数的比特位，即0变成1，1变成0。</td>\n</tr>\n<tr>\n<td>左移（Left shift）</td>\n<td><code>a &lt;&lt; b</code></td>\n<td>将 a 的二进制形式向左移 b (&lt; 32) 比特位，右边用0填充。</td>\n</tr>\n<tr>\n<td>有符号右移</td>\n<td><code>a &gt;&gt; b</code></td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位。</td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td><code>a &gt;&gt;&gt; b</code></td>\n<td>将 a 的二进制表示向右移 b (&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"-\">冷知识<code>+</code></h3>\n<pre><code class=\"lang-js\">console.log(+\'2\');//2\nconsole.log(+false)//0\nconsole.log(+function(){console.log(\'inner\')});//NaN\nconsole.log(+function(){console.log(\'inner\')}());//\"inner\"\nconsole.log(+[])//0\nconsole.log(+{})//NaN\nconsole.log(+[2])//2\n</code></pre>\n<blockquote>\n<p>[success] 作用：将任何值转换为数字</p>\n</blockquote><p><br></p>', '/static/upload/pics/2018/1/30DEzjVOPlNIgc-U39DieiXkve.jpg', 'MillZhang', '2018-01-30 17:04:25', '1', '1', '0', '0', '1', 'js', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('427', '页面回到顶部滚动按钮实现', '', '<h3 id=\"html\">HTML</h3>\n<pre><code class=\"lang-html\">&lt;a id=\"backtop\" class=\"border-bottom\" href=\"javascript:;\"&gt;回顶部&lt;/a&gt;\n</code></pre>\n<h3 id=\"css\">CSS</h3>\n<pre><code class=\"lang-css\">.border-bottom {\n  padding: 10px;\n  display: block;\n  color: #999;\n  text-decoration: none;\n  position: fixed;\n  right: 40px;\n  bottom: 40px;\n  border: 1px solid #DDD;\n  background: #FFF;\n  width: 20px;\n  text-align: center;\n  border-radius: 2px;\n  line-height: 1.25;\n  z-index: 1000;\n  opacity: 0;\n}\n</code></pre>\n<h3 id=\"javascript\">javascript</h3>\n<pre><code class=\"lang-js\">    //缓动动画,可以控制速率\n    var backToTop = function (rate) {\n      var doc = document.body.scrollTop? document.body : document.documentElement;\n      var scrollTop = doc.scrollTop;\n      var top = function () {\n          scrollTop = scrollTop + (0 - scrollTop) / (rate || 2);\n          if (scrollTop &lt; 1) {\n              doc.scrollTop = 0;\n              return;\n          }\n          doc.scrollTop = scrollTop;\n          // 动画gogogo!\n          requestAnimationFrame(top);    \n      };\n      top();\n    };      \n    var topBtn = document.getElementById(\'backtop\');\n    topBtn.onclick=function(){\n      backToTop(12)\n    }\n\n    //监听滚动事件\n    window.onscroll = function(e){\n        var doc = document.body.scrollTop? document.body : document.documentElement;\n        var scrollTop = doc.scrollTop;\n        if(scrollTop&gt;=300){\n            topBtn.style.opacity=1;\n        }else{\n            topBtn.style.opacity=0;\n        }\n    }\n</code></pre>', '/static/upload/pics/2018/1/30lbYW_Fsr4R3dQPpuY4t7rWmL.jpg', '', '2018-01-30 15:48:56', '1', '0', '0', '0', '1', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('428', 'nightmare使用指南', '', '<h3 id=\"-\">关于</h3>\n<p>nightmare是基于<code>electron</code>的一个自动化测试的套件,内置了浏览器,当然也可用于爬虫.我也分别对这两个功能进行了简单的测试.后续会深入研究.</p>\n<p><a href=\"https://github.com/segmentio/nightmare\">github地址</a></p>\n<h3 id=\"-demo\">简单操作,编写一个自动操作的demo</h3>\n<h4 id=\"-\">安装</h4>\n<pre><code class=\"lang-js\">npm i nightmare -S\n</code></pre>\n<h4 id=\"es6-\">ES6支持</h4>\n<ol>\n<li><p>安装babel</p>\n<pre><code class=\"lang-js\">//安装三个babel套件\n//分别是es6基础编译包,扩展支持包,运行环境包\nnpm i babel-register  babel-polyfill babel-preset-env -D\n</code></pre>\n</li>\n<li><p>创建<code>.baberc</code>文件</p>\n</li>\n</ol>\n<pre><code>{\n    \"presets\": [\"env\"]\n}\n</code></pre><ol>\n<li>创建入口文件<code>index.js</code></li>\n</ol>\n<pre><code class=\"lang-js\">//依赖babel\nrequire(\"babel-register\");\nrequire(\"babel-polyfill\");\n\nrequire(\'测试demo的入口js文件\')\n</code></pre>\n<h4 id=\"-\">实现自动化浏览</h4>\n<p>以<code>http://demo.timepack.cn/web</code>为例:</p>\n<ol>\n<li>登录</li>\n</ol>\n<pre><code class=\"lang-js\">const login = async() =&gt; {\n    console.log(\'开始登录...\', \'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\')\n    await nm.goto(\'http://demo.timepack.cn/web\');\n    await nm.click(\'.tab :nth-child(7)\');\n    await nm.wait(\'#inputForm\');\n    //输入用户名和密码\n    await nm.type(\'#account\', \'xxxxx\');\n    await nm.type(\'#password\', \'xxxx\');\n    //获取验证码\n    const code = await nm.evaluate(() =&gt; {\n        return document.querySelector(\'#v-code\').innerText;\n    })\n    console.log(`code:${code}`)\n    await nm.type(\'#code\', code);\n    //点击登录\n    await nm.click(\'.pw-loginBtn\');\n    console.log(\'登录成功...\', \'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\');\n}\n</code></pre>\n<ol>\n<li>新建一个表单</li>\n</ol>\n<pre><code class=\"lang-js\">/**\n * 新建活动\n * @return {[type]} [description]\n */\nconst newActivity = async() =&gt; {\n    console.log(\'开始创建新的活动...\', \'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\');\n    await nm.wait(3000);\n    await nm.click(\'#activity_id\');\n    await nm.wait(\'#activityList\');\n    await nm.click(\'.title&gt;.button\');\n    await nm.wait(\'#inputForm\');\n    await nm.type(\'#title\', `${title}标题${new Date().getTime()}`);\n    await nm.type(\'#content\', `${title}内容${new Date().getTime()}`);\n    await nm.type(\'#start\', `2017-01-01`);\n    await nm.type(\'#end\', `2017-12-31`);\n    await nm.type(\'#upperLimit\', 188);\n    await nm.click(\'.personal-edit&gt;a:first-child\');\n    await nm.wait(\'#activityList\');\n    console.log(\'创建活动完成...\', \'&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\');\n}\n</code></pre>\n<ol>\n<li>退出</li>\n</ol>\n<pre><code class=\"lang-js\">const close = async() =&gt; {\n    console.log(\'测试完成...\', \'&gt;&gt;&gt;&gt;&gt;&gt;\');\n    await nm.end();\n}\n</code></pre>\n<ol>\n<li><p>登录的超时和多次尝试操作</p>\n<p> 首先写个通用的方法:</p>\n</li>\n</ol>\n<pre><code class=\"lang-js\">//多次执行函数方法\nconst runTimes = async(fn, times, timeout) =&gt; {\n    for (let i = 0; i &lt; times; i++) {\n        try {\n            return await outTime(fn, timeout);\n        } catch (e) {\n            logger.warn(e.message);\n        }\n    }\n}\n//登录限时\nconst outTime = (fn, timeout) =&gt; {\n    return Promise.race([\n        fn(),\n        new Promise((resolve, reject) =&gt; {\n            setTimeout(() =&gt; {\n                reject(new Error(\'操作超时了!!!\'));\n            }, timeout);\n        })\n    ])\n}\n\nexport default {runTimes}\n</code></pre>\n<ol>\n<li>运行方法</li>\n</ol>\n<pre><code class=\"lang-js\">const run = async() =&gt; {\n    await helper.runTimes(login, 3, 10000);\n    await newActivity();\n    await close();\n}\n\nrun();\n</code></pre>\n<pre><code class=\"lang-js\">//命令行运行则开始操作\nnode index.js\n</code></pre>\n<p>以上,Over!</p>\n<hr>\n<h3 id=\"-\">爬虫使用</h3>\n<p>现在我们使用<code>nightmare</code>对百度图片进行爬虫操作.</p>\n<p>首先,我们还需要<code>log4js</code>进行日志的记录(关于<code>log4js</code>强大的功能需要单独研究,这里我们简单的使用下吧!).</p>\n<h4 id=\"-\">包导入</h4>\n<pre><code class=\"lang-js\">const Nightmare = require(\'nightmare\')\nconst log4js = require(\'log4js\');\nconst logger = log4js.getLogger();\nlogger.level = \'debug\';\n</code></pre>\n<h4 id=\"-\">配置文件</h4>\n<p>我们新建一个<code>config.js</code>,对我们需要的参数进行一些简单的预设.首先我们的目标是<code>website</code>,搜索关键词是<code>keywords</code>,这里指的是百度图片输入框内的内容,然后图片下载的主路径是<code>diskPath</code>.<br>关于<code>scroll</code>,预期我们发现百度图片采用了图片滚动懒加载,故我们需要模拟滚动条的动作,从而方便一次性获取更多的图片.</p>\n<pre><code class=\"lang-js\">export default {\n    website: \'http://image.baidu.com/\',\n    diskPath: \'G:/images/\',\n    keywords: \'女明星\',\n    scroll: {\n        start: 0,//滚动起始位置\n        step: 1024,//每次滚动的高度\n        times: 100,//滚动次数\n        interval: 100//滚动时间间隔\n    }\n}\n</code></pre>\n<h4 id=\"-\">图片下载</h4>\n<p>图片下载我们采用异步批量下载的方式,同时使用到了<code>bagpipe</code>插件,用来控制并发的数量.</p>\n<pre><code class=\"lang-js\">//下载图片\nconst download = (target, list) =&gt; {\n    if (!fs.existsSync(target)) {\n        logger.info(\'创建新的目录!\');\n        fs.mkdirSync(target);\n    }\n    list.forEach((item, index) =&gt; {\n        var destImage = path.resolve(target, uuidV4() + \'.jpg\');//uuid用来重命名图片\n        bagpipe.push(saveImageFlie, item, destImage, function(err, data) {});\n    });\n}\n\nconst saveImageFlie = (src, dest, callback) =&gt; {\n    request.head(src, function(err, res, body) {\n        if (src) {\n            request(src).pipe(fs.createWriteStream(dest)).on(\'close\', function() {\n                logger.info(`第${index++}张图片下载完成`);\n                callback(null, dest);\n            });\n        }\n\n    });\n};\n</code></pre>\n<h4 id=\"-dom-\">分析dom结构,获取图片列表</h4>\n<pre><code class=\"lang-js\">const getImageList = async() =&gt; {\n    return await nm.evaluate(() =&gt; {\n        let elements = document.querySelectorAll(\'.main_img\');\n        let result = [];\n        for (var i = 0; i &lt; elements.length; ++i) {\n            var item = elements[i];\n            result.push(item.getAttribute(\'data-imgurl\'));\n        }\n        return result;\n    });\n}\n</code></pre>\n<h4 id=\"-\">屏幕延时自动滚动</h4>\n<pre><code class=\"lang-js\">//主要是图片有个加载时间,所以最好限定个延时\nconst autoSroll = async() =&gt; {\n    logger.debug(`开始滚动屏幕`);\n    for (let i = 0; i &lt; config.scroll.times; i++) {\n        let newPos = config.scroll.start + config.scroll.step * i;\n        await outTime(newPos, config.scroll.interval);\n    }\n}\n\nconst outTime = (pos, timeout = 500) =&gt; {\n    return Promise.all([\n        nm.scrollTo(pos, 0),\n        new Promise((resolve, reject) =&gt; {\n            setTimeout(() =&gt; {\n                resolve();\n            }, timeout);\n        })\n    ])\n}\n</code></pre>\n<ul>\n<li>完整代码参考<a href=\"https://github.com/MillZhang/Node/blob/master/crawler/pic.js\">github</a></li>\n</ul>\n<h4 id=\"-\">说明</h4>\n<p>这里获取的都是缩略图,需要获取更高清的图片,我们还需要通过图片点击进去,后续再研究.</p>', '', '', '2018-01-30 15:54:46', '1', '0', '0', '0', '7', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('429', '爬虫小实战', '', '<h3 id=\"-\">前言</h3>\n<p>上次我们使用<code>nightmare</code>这款自动化测试工具进行了百度图片关键词查询结果的爬虫,效率略低.<br>现在我们尝试其他的方式,更高效的进行爬虫操作.这里使用的<code>npm</code>包主要有:</p>\n<ul>\n<li>axios</li>\n<li>cheerio //本次没有用到</li>\n<li>mysql //我们需要把数据记录下来</li>\n<li>log4js //提供一个清晰的日志跟踪</li>\n</ul>\n<h3 id=\"-\">环境准备</h3>\n<ul>\n<li>安装MySQL,搭建本地数据库</li>\n<li>安装上述模块</li>\n<li>配置log4js,这里不详述具体的配置方法</li>\n<li>准备数据库操作的模块,这里也不详述</li>\n</ul>\n<h3 id=\"-\">开始</h3>\n<p>这次我们爬取的目的,依然是百度图库,关键字查找.</p>\n<h4 id=\"-\">调研</h4>\n<p>首先,确认了目前百度图片关键字查找后,图片采用滚动懒加载的方式,所以切换到<code>network</code>,</p>\n<p><img src=\"images/screenshot_1510299953339.png\" alt=\"\"></p>\n<p>简单分析下:</p>\n<ul>\n<li>懒加载使用<code>get</code>方式</li>\n<li>请求头连接是<code>https://image.baidu.com/search/acjson</code></li>\n<li>request参数我们去除空无效非关键的字段,应当如下:</li>\n</ul>\n<pre><code class=\"lang-js\">{\n     tn: \'resultjson_com\',//这个参数不能少\n    ipn: \'rj\',//这个参数也不能少\n    queryWord: \'\',//查询关键词\n    word:\'\',//查询关键词\n    pn: 30,//这个是当前页的数量\n    rn: 30//这个是每页的大小\n}\n</code></pre>\n<ul>\n<li><p>然后response的结构大概是这样的:<br><img src=\"images/screenshot_1510300490490.png\" alt=\"\"></p>\n</li>\n<li><p>data里是个数组,我们关心的是data内,子项的数据结构:</p>\n</li>\n</ul>\n<p><img src=\"images/screenshot_1510300679440.png\" alt=\"\"></p>\n<p>里面有很多数据,我们目前只关心图片url和图片来源的网站,分别是<code>thumbURL</code>,<code>fromURLHost</code></p>\n<h4 id=\"axios-\">axios发送请求</h4>\n<pre><code class=\"lang-js\">let pageNum = config.page.num,\n    pageSize = config.page.size;\nlet imageList = new Set(),\n    hostList = new Set();\n</code></pre>\n<pre><code class=\"lang-js\">const getImageByPage = async(page) =&gt; {\n    return axios.get(\'https://image.baidu.com/search/acjson\', {\n        params: {\n            tn: \'resultjson_com\',\n            ipn: \'rj\',\n            queryWord: config.keywords,\n            word: config.keywords,\n            pn: page,\n            rn: pageSize\n        }\n    }).then(response =&gt; {\n        logger.info(`请求成功,开始解析数据,当前是第${page}页......`);\n        let resData = response.data,\n            lazyData = resData.data;\n        logger.debug(`请求成功,数据长度为${undefined == lazyData ? 0 : lazyData.length}`);\n        if (undefined == lazyData) true;\n        let result = [];\n        lazyData.forEach(item =&gt; {\n            if (undefined != item.thumbURL) {\n                imageList.add(item.thumbURL);\n                hostList.add(item.fromURLHost);\n                result.push(item.thumbURL);\n                //执行数据库插入操作\n                db.insert(`insert into baidu_image(host,url) values(\"${item.fromURLHost}\",\"${item.thumbURL}\")`);\n            }\n        });\n        return true;\n    }).catch(e =&gt; {\n        logger.error(e.message);\n        return false;\n    });\n}\n</code></pre>\n<h3 id=\"-\">控制请求数量</h3>\n<pre><code class=\"lang-js\">const run = async() =&gt; {\n    //发送一个请求\n    for (let i = 0; i &lt; config.page.times; i++) {\n        logger.debug(`开始第${i+1}次请求`)\n        if (await getImageByPage(pageNum)) {\n            pageNum += pageSize;\n        } else {\n            logger.debug(\'没有了,终止循环\');\n            break;\n        }\n    }\n    logger.debug(`一共获取到${imageList.size}张图片`);\n}\n</code></pre>\n<h4 id=\"-\">结果</h4>\n<p><img src=\"images/screenshot_1510300977323.png\" alt=\"\"></p>', '', '', '2018-01-30 15:55:33', '1', '0', '0', '0', '7', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('430', 'git的使用', '', '<h3 id=\"-\">下载代码</h3>\n<pre><code>git clone https://github.com/MillZhang/work-desk.git\n</code></pre><h3 id=\"-\">添加文件</h3>\n<pre><code>git commit -m \'注释\'\n</code></pre><h3 id=\"-\">提交三步曲</h3>\n<pre><code>git add\ngit pull\ngit commit -m \'\'\ngit push\n</code></pre><h3 id=\"git-status\">git status</h3>\n<blockquote>\n<p>查询repo的状态.<br>git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.</p>\n</blockquote>\n<h3 id=\"-\">查看当前协议</h3>\n<pre><code>git remote -v\n</code></pre><h3 id=\"https-ssh\">https切换回ssh</h3>\n<pre><code>git remote set-url origin git@github.com:MillZhang/work-desk.git\n</code></pre><h3 id=\"-\">不输入用户名密码提交指南</h3>\n<ol>\n<li>https切换回ssh</li>\n<li>生成ssh-key</li>\n</ol>\n<blockquote>\n<ol>\n<li>打开git,git config --global user.name \"xxx\"</li>\n<li>ssh-keygen -t rsa -C \"xxxx@qq.com\"</li>\n<li>打开<a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a> 添加ssh-key</li>\n</ol>\n</blockquote>\n<h3 id=\"-\">错误</h3>\n<ol>\n<li><p><code>Changes not staged for commit</code></p>\n<pre><code>git commit -am \"\" or git commit -m \'msg\' -a\n//-a 表示 all\n</code></pre></li>\n<li><p>git commit 进入 vim 如何操作?</p>\n</li>\n</ol>\n<blockquote>\n<p>按i然后写入，写入后按esc键退出编辑状态，然后输入:wq,回车即可</p>\n</blockquote>\n<h3 id=\"-\">附录</h3>\n<ol>\n<li><a href=\"http://www.cnblogs.com/mengdd/p/4153773.html\">常用命令</a></li>\n<li><a href=\"https://github.com/liuchengxu/git-commit-emoji-cn\">git emoji</a></li>\n<li><a href=\"http://blog.csdn.net/u014343528/article/details/48787221\">无权限提交</a></li>\n<li><a href=\"http://blog.csdn.net/qq_34291777/article/details/55052201?locationNum=1&fps=1\">ssh-key的生成</a></li>\n</ol>', '', '', '2018-01-30 15:57:13', '1', '0', '0', '0', '10', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('432', 'mongodb安装指南', '', '<h3 id=\"-\">下载</h3>\n<p>官网下载需要墙，故使用镜像下载。</p>\n<p>镜像地址：<a href=\"http://dl.mongodb.org/dl/win32/x86_64\">http://dl.mongodb.org/dl/win32/x86_64</a></p>\n<p><img src=\"images/screenshot_1514254241844.png\" alt=\"\"></p>\n<p>下载<code>msi</code>文件，一路安装.</p>\n<h3 id=\"-\">环境变量</h3>\n<p>在环境变量<code>path</code>中添加如下路径：</p>\n<pre><code class=\"lang-js\">G:\\softs\\mongo\\bin\n</code></pre>\n<p>校验<code>mongod</code>命令，使用<code>cmd</code>输入<code>mongod -v</code>:</p>\n<p><img src=\"images/screenshot_1514254379686.png\" alt=\"\"></p>\n<p>故，安装完毕。</p>\n<h3 id=\"-\">配置</h3>\n<p>在根目录中，新建<code>data,logs,mongo.cong</code>文件</p>\n<p><img src=\"images/screenshot_1514254478267.png\" alt=\"\"></p>\n<p>配置文件如下:</p>\n<pre><code>dbpath=G:\\softs\\mongo\\data #数据库路径  \nlogpath=G:\\softs\\mongo\\logs #日志输出文件路径  \nlogappend=true #错误日志采用追加模式  \njournal=true #启用日志文件，默认启用  \nquiet=false #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  \nport=27017 #端口号 默认为27017\n</code></pre><h3 id=\"-\">启动服务</h3>\n<pre><code class=\"lang-js\">mongod --dbpath g:\\softs\\mongo\\bin\n</code></pre>\n<p><img src=\"images/screenshot_1514254574491.png\" alt=\"\"></p>\n<p>启动成功！</p>\n<h3 id=\"-\">可视化工具</h3>\n<ul>\n<li>使用<code>mongovue</code></li>\n<li><a href=\"https://robomongo.org/download\">Robomongo</a></li>\n</ul>\n<p>&lt;p class=\"over\"&gt;&lt;/p&gt;</p>\n<h3 id=\"-\">下载</h3>\n<p>官网下载需要墙，故使用镜像下载。</p>\n<p>镜像地址：<a href=\"http://dl.mongodb.org/dl/win32/x86_64\">http://dl.mongodb.org/dl/win32/x86_64</a></p>\n<p><img src=\"images/screenshot_1514254241844.png\" alt=\"\"></p>\n<p>下载<code>msi</code>文件，一路安装.</p>\n<h3 id=\"-\">环境变量</h3>\n<p>在环境变量<code>path</code>中添加如下路径：</p>\n<pre><code class=\"lang-js\">G:\\softs\\mongo\\bin\n</code></pre>\n<p>校验<code>mongod</code>命令，使用<code>cmd</code>输入<code>mongod -v</code>:</p>\n<p><img src=\"images/screenshot_1514254379686.png\" alt=\"\"></p>\n<p>故，安装完毕。</p>\n<h3 id=\"-\">配置</h3>\n<p>在根目录中，新建<code>data,logs,mongo.cong</code>文件</p>\n<p><img src=\"images/screenshot_1514254478267.png\" alt=\"\"></p>\n<p>配置文件如下:</p>\n<pre><code>dbpath=G:\\softs\\mongo\\data #数据库路径  \nlogpath=G:\\softs\\mongo\\logs #日志输出文件路径  \nlogappend=true #错误日志采用追加模式  \njournal=true #启用日志文件，默认启用  \nquiet=false #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false  \nport=27017 #端口号 默认为27017\n</code></pre><h3 id=\"-\">启动服务</h3>\n<pre><code class=\"lang-js\">mongod --dbpath g:\\softs\\mongo\\bin\n</code></pre>\n<p><img src=\"images/screenshot_1514254574491.png\" alt=\"\"></p>\n<p>启动成功！</p>\n<h3 id=\"-\">可视化工具</h3>\n<ul>\n<li>使用<code>mongovue</code></li>\n<li><a href=\"https://robomongo.org/download\">Robomongo</a></li>\n</ul><p><br></p>', '', 'MillZhang', '2018-01-30 16:35:57', '1', '0', '0', '0', '10', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('433', 'mysql安装指南', '', '<h3 id=\"-\">下载</h3>\n<p>这里我们使用镜像下载,<a href=\"http://mirrors.sohu.com/mysql/\">镜像地址</a>.</p>\n<p>搜索下载<code>msi</code>文件,亲测<code>zip</code>文件下没有<code>ini</code>文件,需要手动新建.</p>\n<h3 id=\"-\">环境变量设置</h3>\n<pre><code>//环境变量配置到bin目录\nC:\\Program Files\\MySQL\\MySQL Server 5.7\\bin\n</code></pre><h3 id=\"-\">默认文件配置</h3>\n<p>在<code>C:\\Program Files\\MySQL\\MySQL Server 5.7</code>目录下,有一个<code>my-default.ini</code>,打开配置参数:</p>\n<pre><code class=\"lang-js\"> basedir = C:\\Program Files\\MySQL\\MySQL Server 5.7\n datadir = C:\\Program Files\\MySQL\\MySQL Server 5.7\\data //若无,不需要手动创建,下面会有操作\n port = 3306\n character-set-server=utf8\n default-storage-engine=INNODB\n</code></pre>\n<h3 id=\"-mysqld-\">安装<code>mysqld</code></h3>\n<p><strong>这里必需要使用管理员身份来运行cmd</strong></p>\n<p>在<code>bin</code>目录下运行<code>mysqld install</code>,</p>\n<p>运行成功提示<code>service successfully installed</code><br>如没有使用管理员运行,则提示<code>Install/Remove of the Service Denied!</code>;</p>\n<h3 id=\"-\">启动/关闭服务</h3>\n<p>同样是在<code>bin</code>目录下,运行<code>net start mysql</code>,如要关闭服务则运行<code>net stop mysql</code></p>\n<h3 id=\"-\">服务无法启动</h3>\n<p>如果启动过程中,遇到:</p>\n<blockquote>\n<p>MySQL服务无法启动    服务没有报告任何错误    请键入NET HELPMSG 3534 以获得更多帮助</p>\n</blockquote>\n<p>是由于<code>data</code>目录的缺失,这里我们还需要运行<code>mysqld --initialize-insecure --user=mysql</code>,运行完成后<code>MySQL</code>会自动新建一个<code>data</code>文件夹,并且建好默认的数据库,登录用户名为<code>root</code>,密码为空.<br>然后使用<code>net start mysql</code>就可以启动<code>mysql</code>服务了.</p>\n<p>&lt;p class=\"over\"&gt;Over!&lt;/p&gt;</p>', '', '', '2018-01-30 16:36:24', '1', '0', '0', '0', '10', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('434', 'webpack自定义命令,切换代理地址', 'webpack自定义命令,切换代理地址', '<h3 id=\"-\">场景描述</h3>\n<p>有时候需要模拟线上环境，拉取线上环境数据定位问题（这种情况，尽量避免啦），所以我们在<code>proxyTable</code>中设置代理链接时，需要配置两个地址，分别为<code>test_url</code>和<code>online_url</code>;</p>\n<blockquote>\n<p>[info] 已知，通过<code>npm run dev</code>启动开发环境，<code>-- xx</code>可以向<code>process</code>主进程中传递参数</p>\n</blockquote>\n<h3 id=\"-\">代码</h3>\n<pre><code class=\"lang-js\">proxyTable: {\n  \'/api\': {\n    target: process.argv.includes(\'online\') ? PROXY_URL.online : PROXY_URL.test,\n    changeOrigin: true,\n    logLevel: \'debug\',\n    pathRewrite: {\n      \'^/api\': \'/api\'\n    }\n  }\n}\n</code></pre>', '', '', '2018-01-30 16:36:53', '1', '0', '0', '0', '1', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('435', '正则表达式', '', '<h3 id=\"-\">元字符</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>*</code></td>\n<td>匹配重复任意次(包括0次)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>+</code></td>\n<td>匹配一次或多次(至少一次)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>.</code></td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\w</code></td>\n<td>匹配字母或数字或下划线或汉字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\s</code></td>\n<td>匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\d</code></td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td>匹配单词开始或结束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>^</code></td>\n<td>匹配字符串开始</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>$</code></td>\n<td>匹配字符串结尾</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"-\">字符转义</h3>\n<p>如果想要查找匹配字符本身,则需要进行字符转义,转义符<code>\\</code>,例如:<code>\\.</code>,<code>\\*</code>,<code>\\\\</code></p>\n<h3 id=\"-\">重复</h3>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>重复0次或更多次</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>重复1次或更多次</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>重复0次或1次</td>\n</tr>\n<tr>\n<td><code>{n}</code></td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td><code>{n,}</code></td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td><code>{n,m}</code></td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"-\">字符类</h3>\n<p>在方括号<code>[]</code>里列出即可,如:</p>\n<pre><code class=\"lang-js\">[a-zA-z0-9]\n[abedcdoi?!]\n</code></pre>\n<h3 id=\"-\">分支条件</h3>\n<p>用<code>|</code>将几种规则分割开,满足其中任意一种即匹配成功,栗子:</p>\n<p><code>0\\d{2}-\\d{8}|0\\d{3}-\\d{7}</code>:这个表示<code>0</code>开头,然后<code>2</code>位数字,加<code>-</code>,加<code>8</code>位数字,或者<code>0</code>开头,加<code>3</code>位数字,加<code>-</code>,加<code>7</code>位数字,比方:<br><code>012-12345678</code>或者<code>0123-1234567</code></p>\n<p>注意:匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。所以特别要注意顺序</p>\n<h3 id=\"-\">分组</h3>\n<p>分组是通过标识符<code>()</code>来进行整体的分组匹配的,栗子:</p>\n<p>一个简单的ip匹配:<code>(\\d{1,3}\\.){3}\\d{1,3}</code></p>\n<p><code>\\d{1,3}</code>匹配1到3位的数字，<code>(\\d{1,3}\\.){3}</code>匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字<code>(\\d{1,3})</code></p>\n<p>正确的ip匹配<code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</code></p>\n<h3 id=\"-\">反义符</h3>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任意不是字母，数字，下划线，汉字的字符</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配任意不是空白符的字符</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>匹配任意非数字的字符</td>\n</tr>\n<tr>\n<td><code>\\B</code></td>\n<td>匹配不是单词开头或结束的位置</td>\n</tr>\n<tr>\n<td><code>[^x]</code></td>\n<td>匹配除了x以外的任意字符</td>\n</tr>\n<tr>\n<td><code>[^aeiou]</code></td>\n<td>匹配除了aeiou这几个字母以外的任意字符</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"-\">更多高级功能</h4>\n<h4 id=\"-\">后项引用</h4>\n<p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p>\n<p>后项引用就是:重复搜索前面某个分组匹配到的文本.<br>例如:<br><code>\\b(\\w+)\\b\\s+\\1\\b</code>可以用来匹配重复的单词，像<code>go go</code>, 或者<code>kitty kitty</code>。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字<code>(\\b(\\w+)\\b)</code>，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符<code>(\\s+)</code>，最后是分组1中捕获的内容（也就是前面匹配的那个单词）<code>(\\1)</code>。<br>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：<code>(?&lt;Word&gt;\\w+)</code>(或者把尖括号换成<code>\'</code>也行：<code>(?\'Word\'\\w+))</code>,这样就把<code>\\w+</code>的组名指定为<code>Word</code>了。要反向引用这个分组捕获的内容，你可以使用<code>\\k&lt;Word&gt;</code>,所以上一个例子也可以写成这样：<code>\\b(?&lt;Word&gt;\\w+)\\b\\s+\\k&lt;Word&gt;\\b</code>。</p>\n<p>常用的分组:</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>捕获</td>\n<td><code>(exp)</code></td>\n<td>匹配exp,并捕获文本到自动命名的组里</td>\n</tr>\n<tr>\n<td></td>\n<td><code>(?&lt;name&gt;exp)</code></td>\n<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?\'name\'exp)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>(?:exp)</code></td>\n<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>\n</tr>\n<tr>\n<td>零宽断言</td>\n<td><code>(?=exp)</code></td>\n<td>匹配exp前面的位置</td>\n</tr>\n<tr>\n<td></td>\n<td><code>(?&lt;=exp)</code></td>\n<td>匹配exp后面的位置</td>\n</tr>\n<tr>\n<td></td>\n<td><code>(?!exp)</code></td>\n<td>匹配后面跟的不是exp的位置</td>\n</tr>\n<tr>\n<td></td>\n<td><code>(?&lt;!exp)</code></td>\n<td>匹配前面不是exp的位置</td>\n</tr>\n<tr>\n<td>注释</td>\n<td><code>(?#comment)</code></td>\n<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"-\">零宽断言</h4>\n<blockquote>\n<p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。<br><code>(?=exp)</code>,零宽度正预测先行断言,断言自身出现的位置的后面能匹配表达式exp ----以xxx结尾<br><code>(?&lt;=exp)</code>,宽度正回顾后发断言,断言自身出现的位置的前面能匹配表达式exp ----以xxx开头    </p>\n</blockquote>\n<h4 id=\"-\">负向零宽断言</h4>\n<blockquote>\n<p><code>(?!exp)</code>,零宽度负预测先行断言,断言此位置的后面不能匹配表达式exp ---不以xxx结尾<br><code>(?&lt;!exp)</code>,零宽度负回顾后发断言,断言此位置的前面不能匹配表达式exp    ---不以xxx开头</p>\n</blockquote>\n<h4 id=\"-\">注释</h4>\n<p><code>(?#comment)</code></p>\n<h4 id=\"-\">贪婪与懒惰</h4>\n<h4 id=\"-\">处理选项</h4>\n<h4 id=\"-\">平衡组/递归匹配</h4>\n<h4 id=\"more-\">More...</h4>\n<h3 id=\"-\">参考文档</h3>\n<ol>\n<li><a href=\"https://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门指南</a></li>\n<li><a href=\"https://msdn.microsoft.com/zh-cn/library/hs600312.aspx\">.NET Framework 正则表达式</a></li>\n</ol><p><br></p>', '/static/upload/pics/2018/1/30MHwA2Irg14cFbRW_ZYsWtxm6.jpg', 'MillZhang', '2018-01-30 16:38:48', '5', '1', '0', '0', '10', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('436', 'vue中集成pdf阅读器', '在vue中集成pdf.js', '<h3 id=\"-\">介绍</h3>\n<p><code>pdf.js</code>可以实现在<code>html</code>下直接浏览pdf文档，是一款开源的<code>pdf</code>文档读取解析插件</p>\n<p><code>pdf.js</code>主要包含两个库文件，一个<code>pdf.js</code>和一个<code>pdf.worker.js</code>，，一个负责<code>API</code>解析，一个负责核心解析</p>\n<ul>\n<li><a href=\"http://oritfw5nq.bkt.clouddn.com/pdf.zip\">下载地址</a></li>\n<li><a href=\"https://github.com/rkusa/pdfjs\">github</a></li>\n</ul>\n<h3 id=\"-\">使用步骤</h3>\n<p>将文件解压到<code>static</code>目录下,在预览页面中使用,使用<code>iframe</code>访问<code>static中web内的viewer.html</code>文件,<code>pdf</code>路径通过参数传递,即可使用该插件访问<code>pdf</code>文件</p>\n<pre><code class=\"lang-html\">   &lt;iframe class=\"pdf-viewer\" :src=\'\"/static/pdf/web/viewer.html?file=http://image.cache.timepack.cn/nodejs.pdf\"\' width=\"50%\" height=\"800\" scrolling=\"no\"&gt;\n      您的浏览器不支持PDF阅读\n    &lt;/iframe&gt;\n</code></pre>\n<h3 id=\"-\">问题</h3>\n<p><code>pdf</code>兼容<code>ie,firefox,chrome</code>等主流的浏览器,故浏览器兼容方面无需担心.然后主要注意的是:</p>\n<ol>\n<li>源码必须放在<code>static</code>目录下作为静态资源引入项目,不然会影响<code>webpack</code>编译;</li>\n<li>访问网络<code>pdf</code>文件存在跨域问题,目前暂时是这样配置:<code>Access-Control-Allow-Origin:*</code></li>\n</ol>\n<h3 id=\"-\">参考</h3>\n<ol>\n<li><a href=\"https://www.cnblogs.com/jacksoft/p/5302587.html\">https://www.cnblogs.com/jacksoft/p/5302587.html</a></li>\n<li><a href=\"https://github.com/lewiscutey/PDF/tree/gh-pages\">https://github.com/lewiscutey/PDF/tree/gh-pages</a></li>\n<li><a href=\"https://github.com/rkusa/pdfjs\">https://github.com/rkusa/pdfjs</a></li>\n<li><a href=\"http://blog.csdn.net/xiao_bin_shen/article/details/77778514\">http://blog.csdn.net/xiao_bin_shen/article/details/77778514</a></li>\n</ol><p><br></p>', '', 'MillZhang', '2018-01-30 16:40:41', '1', '0', '0', '0', '5', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('437', 'vue源码分析（一）', 'vue源码分析系列', '<h3 id=\"-\">自运行闭包</h3>\n<pre><code class=\"lang-js\">(function (global, factory) {\n    typeof exports === \'object\' &amp;&amp; typeof module !== \'undefined\' ? module.exports = factory() :\n    typeof define === \'function\' &amp;&amp; define.amd ? define(factory) :\n    (global.Vue = factory());\n}(this,(function(){})));\n</code></pre>\n<p>闭包采用<code>UMD</code>的常规写法，首先判断是否支持<code>Node.js</code>模块格式（<code>exports</code>或<code>module</code>是否存在），存在则使用<code>Node.js</code>模块格式；再判断是否支持<code>AMD</code>（<code>define</code>是否存在），存在则使用<code>AMD</code>方式加载模块。前两个都不存在，则将模块公开到全局（<code>window</code>或<code>global</code>）。</p>\n<h3 id=\"-\">先从上往下捋</h3>\n<h4 id=\"-\">声明严格模式</h4>\n<pre><code class=\"lang-js\">\'use strict\';\n</code></pre>\n<p><a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html\">严格模式的目的</a> :</p>\n<ul>\n<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的Javascript做好铺垫。</li>\n</ul>\n<h4 id=\"-\">一些自定义函数</h4>\n<pre><code class=\"lang-js\">var emptyObject = Object.freeze({});\n</code></pre>\n<p>冻结一个空对象，目的估计是避免操作空对象从而污染对象，全程用来对象的比较判断。</p>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">function isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined &amp;&amp; v !== null\n}\n\n//是否是true\nfunction isTrue (v) {\n  return v === true\n}\n\n//是否是false\nfunction isFalse (v) {\n  return v === false\n}\n\n//查询值是否是原始的数据类型，这里应该不包含对象类\nfunction isPrimitive (value) {\n  return (\n    typeof value === \'string\' ||\n    typeof value === \'number\' ||\n    // $flow-disable-line\n    typeof value === \'symbol\' ||\n    typeof value === \'boolean\'\n  )\n}\n\n//判断是否是对象类型了\nfunction isObject (obj) {\n  return obj !== null &amp;&amp; typeof obj === \'object\'\n}\n</code></pre>\n<blockquote>\n<p>[info] these helpers produces better vm code in JS engines due to their explicitness and function inlining</p>\n</blockquote>\n<p>一些功能性函数，因为这些函数的明确性和内联关系，可以更好的在<code>js</code>引擎中生成虚拟机代码。</p>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">var _toString = Object.prototype.toString;\n\n//参考链接：https://www.cnblogs.com/libin-1/p/5902860.html\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === \'[object Object]\'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === \'[object RegExp]\'\n}\n</code></pre>\n<blockquote>\n<p>[info] Get the raw type string of a value e.g. [object Object]</p>\n</blockquote>\n<p>这里解释说明下，什么是<code>plain javascript objects</code>?<br>即：纯粹的对象，通过<code>{}</code>或<code>new Object</code>创建的对象。</p>\n<h5 id=\"-torawtype-\">关于<code>toRawType</code>的几点说明</h5>\n<ol>\n<li>为什么使用<code>Object.prototype.toString.call()</code>?</li>\n</ol>\n<p>目的是获取对象原型的<code>toString</code>，防止重写<code>toString</code>方法。</p>\n<ol>\n<li>原理是什么？</li>\n</ol>\n<blockquote>\n<p>[info] ECMAScript 3<br>在ES3中,Object.prototype.toString方法的规范如下:<br>115.2.4.2 Object.prototype.toString()<br>在toString方法被调用时,会执行下面的操作步骤:</p>\n<ol>\n<li>获取this对象的[[Class]]属性的值.</li>\n<li>计算出三个字符串\"[object \", 第一步的操作结果Result(1), 以及 \"]\"连接后的新字符串.</li>\n<li>返回第二步的操作结果Result(2).</li>\n</ol>\n</blockquote>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n &gt;= 0 &amp;&amp; Math.floor(n) === n &amp;&amp; isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? \'\'\n    : typeof val === \'object\'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n</code></pre>\n<p>一些转换操作，代码看上去很严谨和简洁，学习了！</p>\n<p>冷知识，<code>JSON.stringify</code>的参数：</p>\n<blockquote>\n<p>[info] 语法：JSON.stringify(value[, replacer [, space]])</p>\n</blockquote>\n<ul>\n<li><p><code>value</code><br>  将要序列化成 一个JSON 字符串的值。</p>\n</li>\n<li><p><code>replacer</code> 可选<br>  如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。</p>\n</li>\n<li><p><code>space</code> <strong>可选</strong><br>  指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。</p>\n</li>\n</ul>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(\',\');\n  for (var i = 0; i &lt; list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap(\'slot,component\', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap(\'key,ref,slot,slot-scope,is\');\n</code></pre>\n<p>这段是将字符串转为<code>map</code>集合，并返回函数，检查<code>key</code>值是否存在，具体这块代码的作用稍后分析。</p>', '', '', '2018-01-30 16:41:33', '1', '0', '0', '0', '5', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('438', 'vue源码分析（二）', '', '<p>:-: 续接（一）</p>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index &gt; -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n</code></pre>\n<p>移除数组中的某一项，该方法可通用化。</p>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n</code></pre>\n<p>检查属性是否是对象的原型属性。</p>\n<p>关于<code>hasOwnProperty</code>的几点说明：</p>\n<blockquote>\n<p>[info]<br><strong>概念</strong>：用于指示一个对象自身(不包括原型链)是否具有指定名称的属性。如果有，返回<code>true</code>，否则返回<code>false</code><br><strong>语法</strong>：<code>obj.hasOwnProperty(prop)</code><br><strong>描述</strong>：所有继承了<code>Object</code>的对象都会继承到 <code>hasOwnProperty</code> 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会<strong>忽略掉那些从原型链上继承到的属性</strong>。</p>\n</blockquote>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : \'\'; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, \'-$1\').toLowerCase()\n});\n</code></pre>', '', '', '2018-01-30 16:42:08', '4', '0', '0', '0', '5', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('439', 'vue笔记', 'vue日常笔记', '<h3 id=\"-vue-scss-\"><code>vue</code>中，如何全局使用<code>scss</code>的变量和方法</h3>\n<ul>\n<li>[文档]（<a href=\"https://vue-loader.vuejs.org/en/configurations/pre-processors.html）\">https://vue-loader.vuejs.org/en/configurations/pre-processors.html）</a></li>\n</ul>\n<ol>\n<li>安装<code>sass-resources-loader</code>;</li>\n<li>在<code>build/utils</code>中加入如下代码</li>\n</ol>\n<pre><code class=\"lang-js\">    scss: generateLoaders(\'sass\').concat({\n      loader: \'sass-resources-loader\',\n      options: {\n        resources: path.resolve(__dirname, \'../src/assets/styles/_variables.scss\')\n      }\n    }),\n</code></pre>\n<hr>\n<h3 id=\"-vue-import-jsweixin-sdk-\"><code>vue</code>中<code>import jsweixin-sdk</code>报错</h3>\n<p>错误：</p>\n<blockquote>\n<p><code>Cannot read property \'title\' of undefined</code></p>\n</blockquote>\n<p>原因:<br>这个问题的原因是，里面在执行<code>this.document.title</code>的时候出的问题，这个<code>js</code>期望实在浏览器全局作用域下执行（<code>this</code>指向<code>window</code>，但是webpack之后，是在一个<code>function</code>作用域下执行，因此<code>this.document</code>为<code>undefined</code>。</p>\n<p>解决方案如下:</p>\n<ul>\n<li>在<code>html</code>中使用<code>script</code>引入</li>\n<li><code>webpack</code>有个<code>script-loader</code>可以让模块文件在global环境下执行</li>\n<li>改源码，将<code>jweixin-1.2.0.js</code>中第一个<code>this</code>改为<code>window</code></li>\n</ul>\n<hr>\n<h3 id=\"-webpack-ip-\"><code>webpack</code>使用<code>ip</code>访问</h3>\n<blockquote>\n<p>在 npm run dev 时添加参数 --host 0.0.0.0即可。</p>\n</blockquote>\n<hr>\n<h3 id=\"-pro-env-js-\"><code>pro.env.js</code>中设置动态参数</h3>\n<pre><code class=\"lang-js\">let version = process.env.npm_package_version.toString();\nmodule.exports = {\n  NODE_ENV: \'\"production\"\',\n  VERSION: JSON.stringify(version)//这里需要使用josn.stringify转为字符串，不然会报错\n}\n</code></pre><p><br></p>', '/static/upload/pics/2018/1/30hnqjAxaPNkXKKc7-xzFPBgiO.jpg', 'MillZhang', '2018-01-30 17:03:32', '1', '1', '0', '0', '5', '', '0', '1', '', '3', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('440', 'ngnix', 'ngnix配置相关', '<h3 id=\"-\">简介</h3>\n<blockquote>\n<p>Nginx 是一个高性能的 Web 和反向代理服务器, 它具有有很多非常优越的特性:</p>\n<p>作为 Web 服务器：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，感谢 Nginx 为我们选择了 epoll and kqueue 作为开发模型.</p>\n<p>作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。</p>\n<p>作为邮件代理服务器: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验。</p>\n</blockquote>\n<h3 id=\"-\">基本功能</h3>\n<ul>\n<li>处理静态文件，索引文件以及自动索引；</li>\n<li>反向代理加速(无缓存)，简单的负载均衡和容错；</li>\n<li>FastCGI，简单的负载均衡和容错；</li>\n<li>模块化的结构。过滤器包括gzipping, byte ranges, chunked responses, 以及 SSI-filter 。在SSI过滤器中，到同一个 proxy 或者 FastCGI 的多个子请求并发处理；</li>\n<li>SSL 和 TLS SNI 支持；</li>\n</ul>\n<h3 id=\"-\">基本操作</h3>\n<h4 id=\"-\">启动</h4>\n<pre><code class=\"lang-js\">sudo /usr/local/nginx/nginx  //直接执行，即可启动\n</code></pre>\n<h4 id=\"-\">重载</h4>\n<p>定位到ngnix的<code>sbin</code>目录下，执行如下的操作</p>\n<pre><code class=\"lang-js\">./ngnix -s reload\n</code></pre>\n<h4 id=\"-\">从容停止，等所有请求结束后关闭服务</h4>\n<pre><code class=\"lang-js\">ps -ef |grep nginx\nkill -QUIT  nginx主进程号\n</code></pre>\n<h4 id=\"-\">快速停止</h4>\n<pre><code class=\"lang-js\">ps -ef |grep nginx\n\nkill -TERM nginx主进程号\n</code></pre>\n<h4 id=\"-\">杀死进程</h4>\n<pre><code class=\"lang-js\">kill -9 nginx主进程号\n</code></pre>\n<h3 id=\"-\">反向代理（跨域）</h3>\n<pre><code class=\"lang-js\">http {\n    server {\n        listen    8000;\n        server_name        www.domain.com;\n        location /h1{\n            index index.html;\n            # 静态资源1服务端目录\n            root  /var/www/domain.com/htdocs1;\n        }\n        # 日志地址\n        access_log    logs/8000.access.log main;\n    }\n    server {\n        listen    8002;\n        server_name        www.domain.com;\n        location /h2{\n            index index.html;\n            # 静态资源2服务端目录\n            root  /var/www/domain.com/htdocs2;\n        }\n           location /api {\n            # 反向代理\n            proxy_pass www.domain.com:8001 #已知的请求地址服务器\n        }\n        # 日志地址\n         access_log    logs/8002.access.log main;\n    }\n}\n</code></pre>\n<p>访问链接<code>www.domain.com:8003/h2</code>即可成功访问部署在<code>www.domain.com:8002</code>上的页面，<br>页面自动重定向请求<code>www.domain.com:8001</code>上的API。</p>\n<h3 id=\"-\">引用</h3>\n<ul>\n<li><a href=\"http://www.nginx.cn/doc/\">中文文档</a></li>\n<li><a href=\"https://www.cnblogs.com/gabrielchen/p/5066120.html\">用nginx的反向代理机制解决前端跨域问题</a></li>\n</ul><p><br></p>', '', 'MillZhang', '2018-01-30 17:10:33', '1', '0', '0', '0', '12', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('441', 'CodeWars题库（一）', '', '<p>[TOC]</p>\n<h3 id=\"1-\">1、 字符数字二进制</h3>\n<blockquote>\n<p>[warning]  Write a function that takes an (unsigned) integer as input, and returns the number of bits that are equal to one in the binary representation of that number.</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<blockquote>\n<blockquote>\n<p>[warning] The binary representation of 1234 is 10011010010, so the function should return 5 in this case.</p>\n</blockquote>\n</blockquote>\n<p>第一个算是常规解法了，也是我的解法~~</p>\n<pre><code class=\"lang-js\">var countBits = function(n) {\n  let result = 0;\n n.toString(2).split(\'\').filter(item=&gt;{\n    if(item == 1){\n      return  result+=1;\n    }\n  });\n  return result\n};\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<p>摘录几个牛逼的方法</p>\n<pre><code class=\"lang-js\">function countBits(n) {\n  for(c=0;n;n&gt;&gt;=1)c+=n&amp;1\n  return c;\n}\n</code></pre>\n<pre><code class=\"lang-js\">countBits = n =&gt; n.toString(2).split(\'0\').join(\'\').length;\n</code></pre>\n<pre><code class=\"lang-js\">var countBits = function(n)\n{\n  a = n.toString(2).match(/1/g);\n  return a == null ? 0 : a.length;\n};\n</code></pre>\n<h3 id=\"2-\">2、 获取字符串数组最长字段</h3>\n<blockquote>\n<p>[warning] 2. 截取字符串数组中最长的字符串，blalala</p>\n</blockquote>\n<pre><code class=\"lang-js\">function longestConsec(strarr, k) {\n  let n = strarr.length,result=\"\";\n  if(n === 0 || k&gt;n || k&lt;=0){\n    return \"\";\n  }\n  strarr.sort(function(a,b){\n        return a.length&lt;b.length;\n    });\n\n    for(let i =0;i&lt;k;i++){\n        result+=strarr[i];\n    }\n    return result;\n\n}\n\nlongestConsec([\"wlwsasphmxx\",\"owiaxujylentrklctozmymu\",\"wpgozvxxiu\"], 2)\n</code></pre>\n<h3 id=\"3-\">3、字符串字母序号</h3>\n<blockquote>\n<p>[warning]  In this kata you are required to, given a string, replace every letter with its position in the alphabet.<br>If anything in the text isn\'t a letter, ignore it and don\'t return it.<br>a being 1, b being 2, etc.</p>\n</blockquote>\n<p><strong>As an example:</strong></p>\n<pre><code>alphabet_position(\"The sunset sets at twelve o\' clock.\")\n</code></pre><blockquote>\n<p>[warning] Should return <code>\"20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11\"</code> as a string.</p>\n</blockquote>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">function alphabetPosition(text) {\n  const target = \'abcdefghijklmnopqrstuvwxyz\'.split(\'\');\n    let array = text.toLowerCase().match(/[a-z]/g);\n  if(null == array)return \'\';\n    text = array.map(item=&gt;{\n        return target.indexOf(item)+1;\n    }).join(\' \');\n  return text;\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">function alphabetPosition(text) {\n  var result = \"\";\n  for (var i = 0; i &lt; text.length; i++){\n    var code = text.toUpperCase().charCodeAt(i)\n    if (code &gt; 64 &amp;&amp; code &lt; 91) result += (code - 64) + \" \";\n  }\n\n  return result.slice(0, result.length-1);\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">let alphabetPosition = (text) =&gt; text.toUpperCase().replace(/[^A-Z]/g, \'\').split(\'\').map(ch =&gt; ch.charCodeAt(0) - 64).join(\' \');\n</code></pre>\n<p>&lt;a class=\"crun\" href=\"http://jsbin.com/duqehal/edit?html,js,console\"  target=\"_blank\"&gt;&lt;/a&gt;</p>\n<h3 id=\"4-\">4、求数组中出现奇数次的值</h3>\n<blockquote>\n<p>[warning] Given an array, find the int that appears an odd number of times.<br>There will always be only one integer that appears an odd number of times.</p>\n</blockquote>\n<pre><code class=\"lang-js\"> //搓方法\nfunction findOdd(param) {\n    let set = new Set(param),\n            result = \'\';\n    [...set].forEach(item=&gt;{\n        let count = 0;\n        param.forEach(p=&gt;{\n                if(item == p){\n                    count++\n                }\n        });\n        if(count%2 !== 0){\n             result = item\n        }\n    });\n  return result;\n}\n</code></pre>\n<pre><code class=\"lang-js\">const findOdd = (xs)=&gt;{\n    return xs.reduce((a,b)=&gt;{\n        return a^b\n    });\n}\nconsole.log(findOdd([20,5,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]));\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">//对象属性去重，计数法\nfunction findOdd(A) {\n  var obj = {};\n  A.forEach(function(el){\n    obj[el] ? obj[el]++ : obj[el] = 1;\n  });\n\n  for(prop in obj) {\n    if(obj[prop] % 2 !== 0) return Number(prop);\n  }\n}\n//更好的实践，只有一循环\nfunction findOdd(A) {\n  var trace = {};\n  A.forEach(function(x) {\n    if (trace[x]) delete trace[x];\n    else trace[x] = true;\n  });\n  return parseInt(Object.keys(trace)[0]);\n}\n</code></pre>\n<p>&lt;a class=\"crun\" href=\"http://jsbin.com/xikoji/edit?js,console\" target=\"_blank\"&gt;&lt;/a&gt;</p>\n<p>关于方法二的解释，下面引用下：</p>\n<p>After having my mind blown by this solution and spending the next hour trying to really understand why this worked, I\'d like to try to explain it:</p>\n<p><code>^ is the XOR Bitwise Operator</code></p>\n<p>From Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">https://en.wikipedia.org/wiki/Bitwise_operation#XOR</a></p>\n<p>A bitwise XOR takes two bit patterns of equal length and performs the logical exclusive OR operation on each pair of corresponding bits. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1. In this we perform the comparison of two bits, being 1 if the two bits are different, and 0 if they are the same.<br><code>16 ^ 6 -&gt; 22</code></p>\n<p>Looks like this when broken down into binary:</p>\n<pre><code>/#  [32]  [16]  [8]  [4]  [2]  [1]\n16    0     1    0    0    0    0\n6     0     0    0    1    1    0\n22    0     1    0    1    1    0\n</code></pre><p>If the column values are the same (ie: 1/1 or 0/0) then the result for that column is 0</p>\n<p>If the column values are different (as in columns [16], [4], and [2]) then the result for that column is 1.</p>\n<p>Because of this, \"same\" = 0 &amp; \"different\" = 1, rule, if the same # occurs twice, it becomes cancelled out of the result.</p>\n<p><code>22 ^ 22 -&gt; 0</code></p>\n<pre><code>/#  [32]  [16]  [8]  [4]  [2]  [1]\n22    0     1    0    1    1    0\n22    0     1    0    1    1    0\n0     0     0    0    0    0    0\n</code></pre><p>So for this Kata, only the # that shows up an ODD number of times will survive \'til the end.</p>\n<pre><code>/#  [32]  [16]  [8]  [4]  [2]  [1]\n5    0     0     0    1    0    1 - ODD\n5    0     0     0    1    0    1 - EVEN\n0    0     0     0    0    0    0 - ^ result\n5    0     0     0    1    0    1 - ODD\n</code></pre><p>Hope that helps!</p>\n<h3 id=\"5-\">5、过滤非数字数组</h3>\n<blockquote>\n<p>[warning] In this kata you will create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out.</p>\n</blockquote>\n<p><strong>Example</strong></p>\n<pre><code class=\"lang-js\">filter_list([1,2,\'a\',\'b\']) == [1,2]\nfilter_list([1,\'a\',\'b\',0,15]) == [1,0,15]\nfilter_list([1,2,\'aasf\',\'1\',\'123\',123]) == [1,2,123]\n</code></pre>\n<p>解答：</p>\n<pre><code class=\"lang-js\">function filter_list(l) {\n  return l.filter(item=&gt;typeof item ==\'number\')\n}\n</code></pre>\n<h3 id=\"6-\">6、字符串格式化</h3>\n<blockquote>\n<p>[warning]  Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.<br><strong>Example:</strong></p>\n<pre><code class=\"lang-js\">createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) // =&gt; returns \"(123) 456-7890\"\n</code></pre>\n<blockquote>\n<p>[warning] The returned format must be correct in order to complete this challenge.<br>Don\'t forget the space after the closing parenthesis!</p>\n</blockquote>\n</blockquote>\n<p>我的解法：</p>\n<pre><code class=\"lang-js\">//该方法计算替换的下标不够直观\nfunction createPhoneNumber(numbers){\n      numbers.unshift(\'(\');\n    numbers.splice(4,0,\')\',\' \')\n    numbers.splice(9,0,\'-\')\n    return numbers.join(\'\');\n}\n</code></pre>\n<p>别人家的代码</p>\n<pre><code class=\"lang-js\">//这个方法算是比较巧妙吧\nfunction createPhoneNumber(numbers){\n    let format = \'(xxx) xxx-xxxx\';\n     for(var i = 0; i &lt; numbers.length; i++)\n      {\n        format = format.replace(\'x\', numbers[i]);\n      }\n      return format;\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">//这个方法跟我的差不多，一个是操作数组，一个操作字符串，可能效率相对会高点\nfunction createPhoneNumber(numbers){\n  numbers = numbers.join(\'\');\n  return \'(\' + numbers.substring(0, 3) + \') \' \n      + numbers.substring(3, 6) \n      + \'-\' \n      + numbers.substring(6);\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">//这个就牛逼了\nfunction createPhoneNumber(numbers){\n  return numbers.join(\'\').replace(/(...)(...)(.*)/, \'($1) $2-$3\');\n}\n</code></pre>\n<p>先看下<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\">官方文档</a>的描述：</p>\n<p><img src=\"images/screenshot_1516341591081.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>替换文本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$1、$2、...、$99</td>\n<td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td>\n</tr>\n<tr>\n<td>$&amp;</td>\n<td>与 regexp 相匹配的子串。</td>\n</tr>\n<tr>\n<td>$`</td>\n<td>位于匹配子串左侧的文本。</td>\n</tr>\n<tr>\n<td>$\'</td>\n<td>位于匹配子串右侧的文本。</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>直接量符号。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>[success] 字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。<br>replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p>\n</blockquote>\n<h3 id=\"7-\">7、数字按位和的组合</h3>\n<blockquote>\n<p>[warning] Write Number in Expanded Form<br>You will be given a number and you will need to return it as a string in Expanded Form. </p>\n</blockquote>\n<p><strong>For Example:</strong></p>\n<pre><code class=\"lang-js\">expandedForm(12); // Should return \'10 + 2\'\nexpandedForm(42); // Should return \'40 + 2\'\nexpandedForm(70304); // Should return \'70000 + 300 + 4\'\n</code></pre>\n<blockquote>\n<p>[warning] NOTE: All numbers will be whole numbers greater than 0.</p>\n</blockquote>\n<p>我的解法：</p>\n<pre><code class=\"lang-js\">function expandedForm(num) {\n    num=num.toString();\n  let len = num.length;\n    let result = num.split(\'\').map((item,index)=&gt;{\n        return Number(item) * Math.pow(10,len-index-1)\n    });\n    return result.filter(item=&gt;item!=0).join(\' + \')\n}\n</code></pre>\n<p>这次其他人的解法也差不多，大同小异，主要还是需要一次<code>map</code>拿到数组新的映射，再一次<code>filter</code>过滤掉值为0的项，下面摘录一个简单的写法(代码可读性并不见得好)：</p>\n<pre><code class=\"lang-js\">const expandedForm = n =&gt; n.toString()\n                            .split(\"\")\n                            .reverse()\n                            .map( (a, i) =&gt; a * Math.pow(10, i))\n                            .filter(a =&gt; a &gt; 0)\n                            .reverse()\n                            .join(\" + \");\n</code></pre>\n<h3 id=\"8-\">8、求数的约数的数组</h3>\n<blockquote>\n<p>[warning] Create a function named <code>divisors/Divisors</code> that takes an integer and returns an array with all of the integer\'s divisors(except for 1 and the number itself). If the number is prime return the string \'(integer) is prime\' (null in C#) (use Either String a in Haskell and <code>Result&lt;Vec&lt;u32&gt;, String&gt;</code> in Rust).</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-js\">divisors(12); // should return [2,3,4,6]\ndivisors(25); // should return [5]\ndivisors(13); // should return \"13 is prime\"\n</code></pre>\n<blockquote>\n<p>[warning] You can assume that you will only get positive integers as inputs.</p>\n</blockquote>\n<p>我的解法：</p>\n<pre><code class=\"lang-js\">function divisors(integer) {\n  let r = [];\n  for(let i= 2;i&lt;integer;i++){\n    if(integer%i == 0){\n      r.push(i);\n    }\n  }\n  return r.length == 0 ? `${integer} is prime` :r ;\n};\n</code></pre>\n<p>别人的,循环次数直接减了一半：</p>\n<pre><code class=\"lang-js\">function divisors(integer) {\n  var res = []\n  for (var i = 2; i &lt;= Math.floor(integer / 2); ++i) if (integer % i == 0) res.push(i);\n  return res.length ? res : integer + \' is prime\'\n};\n</code></pre>\n<h3 id=\"9-\">9、数组排序</h3>\n<blockquote>\n<p>[warning]Your task is to sort a given string. Each word in the String will contain a single number. This number is the position the word should have in the result.<br>Note: Numbers can be from 1 to 9. So 1 will be the first word (not 0).<br>If the input String is empty, return an empty String. The words in the input String will only contain valid consecutive numbers.<br>For an input: \"is2 Thi1s T4est 3a\" the function should return \"Thi1s is2 3a T4est\"</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-js\">your_order(\"is2 Thi1s T4est 3a\")\n[1] \"Thi1s is2 3a T4est\"\n</code></pre>\n<p>我的答案：</p>\n<pre><code class=\"lang-js\">function order(words){\n    var result=[];\n    words.split(\' \').map(item=&gt;{\n    if(!item) return false;\n        result[Number(item.match(/[1-9]/)[0])-1]=item;\n    });\n    return result.join(\' \');\n}\n</code></pre>\n<p>答案二，使用<code>sort</code>排序：</p>\n<pre><code class=\"lang-js\">function order(words){\n  return !words?\'\':words.split(\' \').sort((a,b)=&gt;+a.match(/\\d/g)&gt; +b.match(/\\d/g)).join(\' \')\n}\n</code></pre>\n<p>关于<code>+</code>在这边的使用可参考【Javascript篇】流水账**。</p>\n<h3 id=\"10-\">10、数组按需过滤</h3>\n<blockquote>\n<p>[warning] 原题有点长，我简要描述下：给定数组，由<code>NORTH</code>,<code>SOUTH</code>,<code>WEST</code>,<code>EAST</code>四个值组成，众所周知，<code>N</code>和<code>S</code>，<code>W</code>和<code>E</code>互为反方向。算法要求，数组中从前往后每个元素跟它下一个元素比较，如果为反方向，则将它们两干掉（去除），返回剩下值的数组。</p>\n</blockquote>\n<p><strong>栗子：</strong></p>\n<pre><code class=\"lang-js\">//1\n输入： [\'SOUTH\', \'NORTH\', \'WEST\', \'EAST\', \'SOUTH\']\n输出：[\'SOUTH\']\n//2.\n输入： [\'SOUTH\', \'WEST\', \'NORTH\', \'EAST\']\n输出： [\'SOUTH\', \'WEST\', \'NORTH\', \'EAST\']\n</code></pre>\n<p>这个问题理清楚算法是什么还是比较好解决的，关键一开始理解清楚算法，导致花了很长的时间。<br>我的解法，采用了一个递归，执行效率略差：</p>\n<pre><code class=\"lang-js\">const getOppsite = {\n    NORTH:\'SOUTH\',\n    SOUTH:\'NORTH\',\n    EAST:\'WEST\',\n    WEST:\'EAST\'\n};\n\nfunction dirReduc(plan) {\n    for(var i=0;i&lt;plan.length;i++){\n        if(plan[i] == getOppsite[plan[i+1]]){\n            //拿当前元素与它后一个元素的反向进行比较，如果相同则截取掉它们两个，\n            //返回的新数组递归重新比较\n            plan.splice(i,2);\n           dirReduc(plan);\n        }\n    }\n    return plan;\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<p>对于<code>js</code>来讲，这道题主要考察的应该是<code>Array</code>的高阶函数<code>reduce</code>，关于<code>reduce</code>的描述已在【流水账】中记录了，这里不再赘述，简要的讲下概念：</p>\n<blockquote>\n<p>[success] <code>reduce()</code> 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p>\n</blockquote>\n<pre><code class=\"lang-js\">const getOppsite = {\n    NORTH:\'SOUTH\',\n    SOUTH:\'NORTH\',\n    EAST:\'WEST\',\n    WEST:\'EAST\'\n};\n\nfunction dirReduc(plan) {\n    return plan.reduce(function(result,current){\n        //这是这个方法的巧妙点，利用数组的最后一位来与当前值进行比较，\n        //刚好达到算法的要求。\n        if(result[result.length-1] == getOppsite[current]){\n            result.pop();\n        }else{\n            result.push(current);\n        }\n        return result;\n    },[]);\n}\n</code></pre>', '', '', '2018-01-30 17:11:18', '1', '0', '0', '0', '9', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('442', 'CodeWars题库（二）', '', '<h3 id=\"1-\">1、字符串模式匹配</h3>\n<blockquote>\n<p>[warning] Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return <code>true</code> if the string is valid, and <code>false</code> if it\'s invalid.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<pre><code class=\"lang-js\">\"()\"                 =&gt;  true\n\")(()))\"            =&gt;  false\n\"(\"              =&gt;  false\n\"(())((()())())\"          =&gt;  true\n</code></pre>\n<p><strong>Constraints:</strong></p>\n<pre><code class=\"lang-js\">0 &lt;= input.length &lt;= 100\n</code></pre>\n<blockquote>\n<p>[warning] You may assume that the input string will only contain opening and closing parenthesis and will not be an empty string.</p>\n</blockquote>\n<p>我的代码：</p>\n<pre><code class=\"lang-js\">//不好意思，又见递归\n//递归将匹配到的()，替换掉，直到匹配不到，则false,为空则true\nfunction validParentheses(parens){\n  parens = parens.replace(/\\(\\)/g,\'\').trim();\n  if(!parens){\n    return true;\n  }\n  let match = parens.match(/\\(\\)/g);\n  if(null != match &amp;&amp; match.length&gt;0){\n    return validParentheses(parens);\n  }else{\n    return false;\n  }\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">function validParentheses(parens){\n  let tokenizer=/[()]/g,token,count=0;\n  while(token = tokenizer.exec(parens),null!=token){\n    if(token == \'(\'){\n      count++;\n    }else if(token==\')\'){\n      count--;\n      if(count&lt;0){\n        return false;\n      }\n    }\n  }\n  return count == 0;\n}\n</code></pre>\n<p>关于<code>exec</code>，记录一笔：</p>\n<blockquote>\n<p>[success] <code>RegExpObject.exec(string)</code></p>\n</blockquote>\n<p>[参考]（<a href=\"http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp）\">http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp）</a></p>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<pre><code class=\"lang-js\">function validParentheses(parens){\n  var indent = 0;\n\n  for (var i = 0 ; i &lt; parens.length &amp;&amp; indent &gt;= 0; i++) {\n    indent += (parens[i] == \'(\') ? 1 : -1;    \n  }\n\n  return (indent == 0);\n}\n</code></pre>\n<h3 id=\"2-\">2、字符串替换</h3>\n<blockquote>\n<p>[warning] Move the first letter of each word to the end of it, then add \"ay\" to the end of the word. Leave punctuation marks untouched.</p>\n</blockquote>\n<p><strong>Examples:</strong></p>\n<pre><code class=\"lang-js\">pigIt(\'Pig latin is cool\'); // igPay atinlay siay oolcay\npigIt(\'Hello world !\');     // elloHay orldWay !\n</code></pre>\n<p>我的解法：</p>\n<pre><code class=\"lang-js\">function pigIt(str){\n  return str.split(\' \').map(item=&gt;item.substring(1,item.length)+item.substr(0,1)+\'ay\').join(\' \')\n}\n</code></pre>\n<p>主要还是通过截取字符串，达到拼接的目的，这里有几点值得注意下：</p>\n<ul>\n<li><code>substr</code>与<code>substring</code>的区别，前者返回一个从指定位置开始的指定长度的子字符串；后者是获取区间内的字符串。</li>\n<li>字符串<code>item</code>可通过<code>item.charAt(0)</code>或者<code>item[0]</code>来获取首字母；</li>\n<li>字符串的截取同样可以沿用数组的方法<code>slice</code>,跟字符串的截取方法差不多；</li>\n</ul>\n<p>优化版本：</p>\n<pre><code class=\"lang-js\">function pigIt(str){\n  return str.split(\' \').map(item=&gt;item.slice(1)+item[0]+\'ay\').join(\' \')\n}\n</code></pre>\n<p>&lt;div class=\"cline\"&gt;&lt;/div&gt;\n\n</p>\n<p>之前使用的字符串模板替换，在这里同样可用，沿用并巩固下：</p>\n<pre><code class=\"lang-js\">//简洁的很漂亮\nfunction pigIt(str){\n    return str.replace(/(\\w)(\\w+)/g,\'$2$1ay\')\n}\n</code></pre>\n<h3 id=\"3-\">3、</h3>\n<blockquote>\n<p>[warning] Find the missing letter<br>Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.<br>You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.<br>The array will always contain letters in only one case.</p>\n</blockquote>\n<p><strong>Example:</strong></p>\n<pre><code class=\"lang-js\">[\'a\',\'b\',\'c\',\'d\',\'f\'] -&gt; \'e\'\n[\'O\',\'Q\',\'R\',\'S\'] -&gt; \'P\'\n</code></pre>\n<blockquote>\n<p>[warning] (Use the English alphabet with 26 letters!)<br>Have fun coding it and please don\'t forget to vote and rank this kata! :-)<br>I have also created other katas. Take a look if you enjoyed this kata!</p>\n</blockquote>\n<p>我的解法：</p>\n<pre><code class=\"lang-js\">function findMissingLetter(array)\n{\n    let result  = \'\';\n    array.reduce((r,item)=&gt;{\n        let num = item.charCodeAt();\n        if(r === 0){\n            r = num;\n        }\n        if(Math.abs(num-r) &gt;1){\n            result = String.fromCharCode(((num+r)/2).toString());\n        }\n        return num;\n\n    },0);\n\n  return result;\n}\n</code></pre>', '', '', '2018-01-30 17:12:04', '2', '0', '0', '0', '9', '', '0', '1', '', '1', '0', '0', '0', '0', '0');
INSERT INTO `li_article` VALUES ('445', 'Hexo个人博客搭建笔录', '', '<h3 id=\"-\">参考</h3>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\">hexo官方文档</a></li>\n<li><a href=\"http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/\">博客</a></li>\n</ul>\n<h3 id=\"-\">环境装备</h3>\n<ol>\n<li>nodejs(最后大于6.0);</li>\n<li><code>hexo</code>,通过<code>npm install hexo -g</code>安装;</li>\n<li>github仓库(username.github.io)</li>\n</ol>\n<h3 id=\"-\">常用命令</h3>\n<ul>\n<li><code>hexo init</code>创建文件夹;</li>\n<li><code>hexo clean</code>清除文件;</li>\n<li><code>hexo g/hexo generate</code>生成静态文件;</li>\n<li><code>hexo d/hexo deploy</code>远程发布 ;</li>\n<li><code>hexo server</code>启动本地服务</li>\n</ul>\n<h3 id=\"hexo-github-\">hexo与github仓库的关联提交</h3>\n<p>在博客根目录下的<code>_config.yml</code>的文件中,修改如下代码:</p>\n<pre><code>deploy:\n    type: git\n    repo: https://github.com/MillZhang/millzhang.github.io.git #远程git仓库\n    branch: master\n</code></pre><p>yml`的文件中,修改如下代码:</p>\n<pre><code>deploy:\n    type: git\n    repo: https://github.com/MillZhang/millzhang.github.io.git #远程git仓库\n    branch: master\n</code></pre><h3 id=\"-themes\">主题Themes</h3>\n<pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n</code></pre><p>该主题需安装插件,生成所有文章的目录</p>\n<pre><code>//仅支持node&gt;6.0\nnpm i hexo-generator-json-content --save\n</code></pre><p>安装完成后需要在根目录下的<code>_config.yml</code>中添加如下的配置:</p>\n<pre><code># 所有文章目录\njsonContent:\n    meta: false\n    pages: false\n    posts:\n      title: true\n      date: true\n      path: true\n      text: false\n      raw: false\n      content: false\n      slug: false\n      updated: false\n      comments: false\n      link: false\n      permalink: false\n      excerpt: false\n      categories: false\n      tags: true\n</code></pre><h3 id=\"-\">一些小技巧</h3>\n<ul>\n<li>让文章只显示一部分,只需要在文章中添加,后面的内容就不显示了;</li>\n<li>给文章分类(tags),需要在稳重添加<code>tags:[node,javascript]</code></li>\n</ul>\n<h3 id=\"-\">插件</h3>\n<p>1.使用git同步到git仓库</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>2.生成易于搜索引擎搜素的网站地图</p>\n<pre><code>npm install hexo-generator-sitemap --save\n</code></pre><p>3.生成rss订阅文件</p>\n<pre><code>npm install hexo-generator-feed --save\n</code></pre>', '', '', '2018-01-30 17:26:40', '1', '0', '0', '0', '10', '', '0', '1', '', '1', '0', '0', '0', '0', '0');

-- ----------------------------
-- Table structure for li_comment
-- ----------------------------
DROP TABLE IF EXISTS `li_comment`;
CREATE TABLE `li_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `aid` int(11) DEFAULT NULL COMMENT '文章id',
  `author` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `qq` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `comment` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `belongid` int(11) DEFAULT '0' COMMENT '回复的评论id',
  `dig` int(11) DEFAULT '0',
  `tipoff` int(11) DEFAULT '0' COMMENT '举报',
  `createtime` datetime DEFAULT NULL,
  `pic` varchar(255) COLLATE utf8_bin DEFAULT '' COMMENT '头像',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of li_comment
-- ----------------------------

-- ----------------------------
-- Table structure for li_guest
-- ----------------------------
DROP TABLE IF EXISTS `li_guest`;
CREATE TABLE `li_guest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `contact` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `guest` varchar(255) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of li_guest
-- ----------------------------

-- ----------------------------
-- Table structure for li_item
-- ----------------------------
DROP TABLE IF EXISTS `li_item`;
CREATE TABLE `li_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `itemname` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_item
-- ----------------------------
INSERT INTO `li_item` VALUES ('1', '原创');
INSERT INTO `li_item` VALUES ('2', '转载');
INSERT INTO `li_item` VALUES ('3', '笔记');
INSERT INTO `li_item` VALUES ('9', '总结');
INSERT INTO `li_item` VALUES ('10', '资源');

-- ----------------------------
-- Table structure for li_links
-- ----------------------------
DROP TABLE IF EXISTS `li_links`;
CREATE TABLE `li_links` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `link` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `logo` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `qq` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `notice` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `flag` varchar(255) COLLATE utf8_bin DEFAULT '0' COMMENT '是否通过',
  `orders` int(255) DEFAULT '0' COMMENT '顺序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Records of li_links
-- ----------------------------
INSERT INTO `li_links` VALUES ('30', '奇舞周刊', 'https://weekly.75team.com/', 'http://p1.ssl.qhimg.com/t019a998a1b366e334e.png', '', null, '1', '0');
INSERT INTO `li_links` VALUES ('31', '张鑫旭', 'http://www.zhangxinxu.com/', '', '', null, '1', '0');
INSERT INTO `li_links` VALUES ('32', '伯乐在线', 'http://www.jobbole.com/', '', '', null, '1', '0');
INSERT INTO `li_links` VALUES ('33', '司徒正美', 'http://www.cnblogs.com/rubylouvre/', '', '', null, '1', '0');
INSERT INTO `li_links` VALUES ('35', 'Aaron', 'http://www.haorooms.com/', '', '', null, '1', '0');

-- ----------------------------
-- Table structure for li_manage_permission
-- ----------------------------
DROP TABLE IF EXISTS `li_manage_permission`;
CREATE TABLE `li_manage_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pername` varchar(255) DEFAULT NULL,
  `permission` text,
  `tag` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_manage_permission
-- ----------------------------
INSERT INTO `li_manage_permission` VALUES ('1', '新建/编辑文章', 'admin/content/article', '1');
INSERT INTO `li_manage_permission` VALUES ('2', '添加markdown', 'admin/content/addmarkdown', '1');
INSERT INTO `li_manage_permission` VALUES ('3', '文章列表', 'admin/content/index', '1');
INSERT INTO `li_manage_permission` VALUES ('7', '后台首页', 'admin/index/index', '4');
INSERT INTO `li_manage_permission` VALUES ('8', '后台欢迎页', 'admin/index/welcome', '4');
INSERT INTO `li_manage_permission` VALUES ('9', '草稿箱文章列表', 'admin/content/draftlist', '1');
INSERT INTO `li_manage_permission` VALUES ('10', '新增/编辑文章提交接口', 'admin/content/doadd', '1');
INSERT INTO `li_manage_permission` VALUES ('11', '草稿箱发布接口', 'admin/content/updatestatus', '1');
INSERT INTO `li_manage_permission` VALUES ('12', '删除/批量删除文章接口', 'admin/content/delsome', '1');
INSERT INTO `li_manage_permission` VALUES ('13', '上传文章缩略图接口', 'admin/content/upload', '1');
INSERT INTO `li_manage_permission` VALUES ('14', '上传编辑器图片接口', 'admin/content/uploadeditor', '1');
INSERT INTO `li_manage_permission` VALUES ('15', '上传markdown文件及解析接口/内容分页', 'admin/content/uploadfile', '1');
INSERT INTO `li_manage_permission` VALUES ('16', '留言列表', 'admin/guest/index', '5');
INSERT INTO `li_manage_permission` VALUES ('17', '删除/批量留言接口', 'admin/guest/delsome', '5');
INSERT INTO `li_manage_permission` VALUES ('18', '退出后台接口', 'admin/index/logout', '4');
INSERT INTO `li_manage_permission` VALUES ('19', '栏目列表', 'admin/item/index', '6');
INSERT INTO `li_manage_permission` VALUES ('20', '新增/编辑栏目', 'admin/item/item', '6');
INSERT INTO `li_manage_permission` VALUES ('21', '新增/编辑栏目接口', 'admin/item/save', '6');
INSERT INTO `li_manage_permission` VALUES ('22', '删除/批量删除栏目接口', 'admin/item/delsome', '6');
INSERT INTO `li_manage_permission` VALUES ('23', '申请列表', 'admin/links/index', '14');
INSERT INTO `li_manage_permission` VALUES ('24', '删除/批量删除友情链接接口', 'admin/links/delsome', '14');
INSERT INTO `li_manage_permission` VALUES ('25', '导航列表', 'admin/menu/index', '2');
INSERT INTO `li_manage_permission` VALUES ('26', '新增/编辑导航', 'admin/menu/item', '2');
INSERT INTO `li_manage_permission` VALUES ('27', '编辑/新增导航接口', 'admin/menu/save', '2');
INSERT INTO `li_manage_permission` VALUES ('28', '删除/批量删除导航接口', 'admin/menu/delsome', '2');
INSERT INTO `li_manage_permission` VALUES ('29', '权限列表', 'admin/permission/index', '10');
INSERT INTO `li_manage_permission` VALUES ('30', '新增/编辑权限', 'admin/permission/item', '10');
INSERT INTO `li_manage_permission` VALUES ('31', '编辑/新增权限接口', 'admin/permission/save', '10');
INSERT INTO `li_manage_permission` VALUES ('32', '删除/批量删除权限接口', 'admin/permission/delsome', '10');
INSERT INTO `li_manage_permission` VALUES ('33', '权限分类列表', 'admin/pertag/index', '10');
INSERT INTO `li_manage_permission` VALUES ('34', '新增/编辑权限分类', 'admin/pertag/item', '10');
INSERT INTO `li_manage_permission` VALUES ('35', '编辑/新增权限分类接口', 'admin/pertag/save', '10');
INSERT INTO `li_manage_permission` VALUES ('36', '删除/批量删除权限分类接口', 'admin/pertag/delsome', '10');
INSERT INTO `li_manage_permission` VALUES ('37', '角色列表', 'admin/role/index', '10');
INSERT INTO `li_manage_permission` VALUES ('38', '新增/编辑角色', 'admin/role/item', '10');
INSERT INTO `li_manage_permission` VALUES ('39', '新增/编辑角色接口', 'admin/role/save', '10');
INSERT INTO `li_manage_permission` VALUES ('40', '删除/批量删除角色接口', 'admin/role/delsome', '10');
INSERT INTO `li_manage_permission` VALUES ('41', '角色分配权限页', 'admin/role/perlist', '10');
INSERT INTO `li_manage_permission` VALUES ('42', '角色分配权限保存接口', 'admin/role/rolesave', '10');
INSERT INTO `li_manage_permission` VALUES ('43', '标签列表', 'admin/tag/index', '9');
INSERT INTO `li_manage_permission` VALUES ('44', '新增/编辑标签', 'admin/tag/item', '9');
INSERT INTO `li_manage_permission` VALUES ('45', '新增/编辑标签接口', 'admin/tag/save', '9');
INSERT INTO `li_manage_permission` VALUES ('46', '删除/批量删除标签接口', 'admin/tag/delsome', '9');
INSERT INTO `li_manage_permission` VALUES ('47', '用户列表', 'admin/user/index', '8');
INSERT INTO `li_manage_permission` VALUES ('48', '新增/编辑用户', 'admin/user/item', '8');
INSERT INTO `li_manage_permission` VALUES ('49', '新增/编辑用户接口', 'admin/user/save', '8');
INSERT INTO `li_manage_permission` VALUES ('50', '删除/批量删除用户接口', 'admin/user/delsome', '8');
INSERT INTO `li_manage_permission` VALUES ('51', '常规设置', 'admin/system/index', '11');
INSERT INTO `li_manage_permission` VALUES ('52', '常规设置保存接口', 'admin/system/edit', '11');
INSERT INTO `li_manage_permission` VALUES ('53', '评论设置', 'admin/system/setcomment', '11');
INSERT INTO `li_manage_permission` VALUES ('54', '评论设置保存接口', 'admin/system/commentedit', '11');
INSERT INTO `li_manage_permission` VALUES ('55', '管理员列表', 'admin/user/adminlist', '8');
INSERT INTO `li_manage_permission` VALUES ('56', '评论列表', 'admin/comment/index', '12');
INSERT INTO `li_manage_permission` VALUES ('57', '举报列表', 'admin/comment/tiplist', '12');
INSERT INTO `li_manage_permission` VALUES ('58', '主题列表', 'admin/topic/index', '13');
INSERT INTO `li_manage_permission` VALUES ('59', '显示/隐藏主题', 'admin/topic/update', '13');
INSERT INTO `li_manage_permission` VALUES ('60', '主题标签管理', 'admin/topictag/index', '13');
INSERT INTO `li_manage_permission` VALUES ('61', '新增/编辑主题分类', 'admin/topictag/item', '13');
INSERT INTO `li_manage_permission` VALUES ('62', '新增/编辑主题分类接口', 'admin/topictag/save', '13');
INSERT INTO `li_manage_permission` VALUES ('63', '删除/批量删除主题标签接口', 'admin/topictag/delsome', '13');
INSERT INTO `li_manage_permission` VALUES ('64', '链接管理', 'admin/links/list', '14');
INSERT INTO `li_manage_permission` VALUES ('65', '新增/编辑友情链接	', 'admin/links/item', '14');
INSERT INTO `li_manage_permission` VALUES ('66', '新增/编辑友情链接接口', 'admin/links/save', '14');
INSERT INTO `li_manage_permission` VALUES ('67', '显示/隐藏友情链接接口', 'admin/links/upstatus', '14');

-- ----------------------------
-- Table structure for li_manage_role
-- ----------------------------
DROP TABLE IF EXISTS `li_manage_role`;
CREATE TABLE `li_manage_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role` varchar(255) DEFAULT NULL,
  `rolename` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `pid` text,
  `permission` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_manage_role
-- ----------------------------
INSERT INTO `li_manage_role` VALUES ('1', 'superadmin', '超级管理员', '1,2,3,9,10,11,12,13,14,15,25,26,27,28,7,8,18,16,17,19,20,21,22,47,48,49,50,55,43,44,45,46,29,30,31,32,33,34,35,36,37,38,39,40,41,42,51,52,53,54,56,57,58,59,60,61,62,63,23,24,64,65,66,67', 0x
INSERT INTO `li_manage_role` VALUES ('2', 'admin', '管理员', '1,2,3,9,10,11,12,13,14,15,25,26,27,28,7,8,18,16,17,19,20,21,22,23,24,47,43,44,45,46', 0x
INSERT INTO `li_manage_role` VALUES ('3', 'editor', '编辑', '1,2,3,9,10,11,12,13,14,15,7,8,18', 0x
INSERT INTO `li_manage_role` VALUES ('4', 'visitor', '访客', '3,9,25,7,8,18,16,19,23,47,43', 0x61646D696E2F636F6E74656E742F696E6465782C61646D696E2F636F6E74656E742F64726166746C6973742C61646D696E2F6D656E752F696E6465782C61646D696E2F696E6465782F696E6465782C61646D696E2F696E6465782F77656C636F6D652C61646D696E2F696E6465782F6C6F676F75742C61646D696E2F67756573742F696E6465782C61646D696E2F6974656D2F696E6465782C61646D696E2F6C696E6B732F696E6465782C61646D696E2F757365722F696E6465782C61646D696E2F7461672F696E646578);

-- ----------------------------
-- Table structure for li_manage_tag
-- ----------------------------
DROP TABLE IF EXISTS `li_manage_tag`;
CREATE TABLE `li_manage_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_manage_tag
-- ----------------------------
INSERT INTO `li_manage_tag` VALUES ('1', '文章管理');
INSERT INTO `li_manage_tag` VALUES ('2', '导航管理');
INSERT INTO `li_manage_tag` VALUES ('4', '基础页面');
INSERT INTO `li_manage_tag` VALUES ('5', '留言管理');
INSERT INTO `li_manage_tag` VALUES ('6', '栏目管理');
INSERT INTO `li_manage_tag` VALUES ('8', '用户管理');
INSERT INTO `li_manage_tag` VALUES ('9', '标签管理');
INSERT INTO `li_manage_tag` VALUES ('10', '权限管理');
INSERT INTO `li_manage_tag` VALUES ('11', '系统设置');
INSERT INTO `li_manage_tag` VALUES ('12', '评论管理');
INSERT INTO `li_manage_tag` VALUES ('13', '社区管理');
INSERT INTO `li_manage_tag` VALUES ('14', '友情链接');

-- ----------------------------
-- Table structure for li_menu
-- ----------------------------
DROP TABLE IF EXISTS `li_menu`;
CREATE TABLE `li_menu` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `menuname` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '菜单名',
  `url` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '导航链接',
  `info` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '备注',
  `appear` int(11) DEFAULT '1',
  `orders` int(255) DEFAULT '0' COMMENT '排序',
  `target` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of li_menu
-- ----------------------------
INSERT INTO `li_menu` VALUES ('1', '首页', '/', '', '0', '1', '1');
INSERT INTO `li_menu` VALUES ('8', '资源下载', '/download.html', null, '0', '3', '0');

-- ----------------------------
-- Table structure for li_system
-- ----------------------------
DROP TABLE IF EXISTS `li_system`;
CREATE TABLE `li_system` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sitename` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `keywords` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `author` char(50) DEFAULT NULL,
  `copyright` varchar(255) DEFAULT NULL,
  `links` text,
  `allowcomment` int(11) DEFAULT '1',
  `tongji` text,
  `theme` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT 'default',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_system
-- ----------------------------
INSERT INTO `li_system` VALUES ('1', '前端小阳', '/', '前端，Javascript，CSS，Node，Vue', '前端个人博客', 'MillZhang', '@2018 copyright', '<li><a href=\"http://www.jsout.com\" target=\"_blank\">前端汇</a></li>\n<li><a href=\"http://www.yii-china.com\" target=\"_blank\">Yii中文网</a></li>\n<li><a href=\"http://laravelacademy.org\" target=\"_blank\">laravel学院</a></li>\n<li><a href=\"http://wangeditor.github.io\" target=\"_blank\">wangEditor</a></li>\n<li><a href=\"http://www.drupalchina.cn\" target=\"_blank\">Drupal中国</a></li>\n<li><a href=\"http://www.mairuier.com/\" target=\"_blank\">麦锐尔</a></li>\n<li><a href=\"http://blog.bestbole.com\" target=\"_blank\">百思伯乐</a></li>\n<li><a href=\"http://iquan.kuaizhan.com\" target=\"_blank\">爱圈快站</a></li>\n<li><a href=\"http://www.imenger.cn\" target=\"_blank\">IM极客小站</a></li>\n<li><a href=\"http://www.zslin.com\" target=\"_blank\">知识林</a></li>\n<li><a href=\"http://iotechie.info\" target=\"_blank\">I/OTechie技术社区</a></li>\n<li><a href=\"http://www.17ky.net\" target=\"_blank\">一起开源</a></li>\n<li><a href=\"http://www.cxytiandi.com\" target=\"_blank\">猿天地</a></li>', '0', '<script>\n    var _hmt = _hmt || [];\n    (function() {\n        var hm = document.createElement(\"script\");\n        hm.src = \"//hm.baidu.com/hm.js?8c04fc9ebc7d286e7c03911b6affb970\";\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(hm, s);\n    })();\n</script>', 'liblog');

-- ----------------------------
-- Table structure for li_system_comment
-- ----------------------------
DROP TABLE IF EXISTS `li_system_comment`;
CREATE TABLE `li_system_comment` (
  `clientid` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `appcode` text CHARACTER SET utf8,
  `appkey` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
  `appid` varchar(255) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`,`appid`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of li_system_comment
-- ----------------------------
INSERT INTO `li_system_comment` VALUES ('clientId', '<!--高速版-->\n<div id=\"SOHUCS\"></div>\n<script charset=\"utf-8\" type=\"text/javascript\" src=\"http://changyan.sohu.com/upload/changyan.js\" ></script>\n<script type=\"text/javascript\">\n    window.changyan.api.config({\n        appid: \'cysoRJNxO\',\n        conf: \'prod_1fbcbcaf3589e576afe2785fe80d6684\'\n    });\n</script>', 'ce46948884ce9504641c9c97d3171bce', 'cysoRJNxO', '1');

-- ----------------------------
-- Table structure for li_tags
-- ----------------------------
DROP TABLE IF EXISTS `li_tags`;
CREATE TABLE `li_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tagname` varchar(255) DEFAULT NULL,
  `appear` int(11) DEFAULT '1',
  `orders` int(255) DEFAULT '0' COMMENT '显示顺序',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_tags
-- ----------------------------
INSERT INTO `li_tags` VALUES ('1', 'Javascript', '1', '0');
INSERT INTO `li_tags` VALUES ('2', 'css', '1', '1');
INSERT INTO `li_tags` VALUES ('3', 'html', '1', '2');
INSERT INTO `li_tags` VALUES ('4', 'jquery', '1', '3');
INSERT INTO `li_tags` VALUES ('5', 'vue', '1', '4');
INSERT INTO `li_tags` VALUES ('6', 'webpack', '1', '5');
INSERT INTO `li_tags` VALUES ('7', 'nodejs', '1', '6');
INSERT INTO `li_tags` VALUES ('8', 'http', '1', '7');
INSERT INTO `li_tags` VALUES ('9', '面试', '1', '0');
INSERT INTO `li_tags` VALUES ('10', '前端工具', '1', '8');
INSERT INTO `li_tags` VALUES ('11', '微信', '1', '0');
INSERT INTO `li_tags` VALUES ('12', '服务器', '1', '0');

-- ----------------------------
-- Table structure for li_topic
-- ----------------------------
DROP TABLE IF EXISTS `li_topic`;
CREATE TABLE `li_topic` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `item` varchar(255) DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin COMMENT '内容',
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '标题',
  `view` bigint(20) DEFAULT '1' COMMENT '点击数',
  `updatetime` datetime DEFAULT NULL,
  `updateauthor` varchar(255) DEFAULT NULL,
  `updatepic` varchar(255) DEFAULT NULL,
  `replycount` int(11) DEFAULT '0' COMMENT '回复数',
  `show` smallint(255) DEFAULT '1' COMMENT '是否显示',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_topic
-- ----------------------------

-- ----------------------------
-- Table structure for li_topic_comment
-- ----------------------------
DROP TABLE IF EXISTS `li_topic_comment`;
CREATE TABLE `li_topic_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(255) NOT NULL,
  `tid` bigint(20) DEFAULT NULL,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL COMMENT '主题标题',
  `createtime` datetime DEFAULT NULL,
  `pic` varchar(255) DEFAULT '' COMMENT '回复者头像',
  `like` bigint(20) DEFAULT '0',
  `comment` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  `likers` text,
  `oldcomment` longtext CHARACTER SET utf8 COLLATE utf8_bin,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of li_topic_comment
-- ----------------------------

-- ----------------------------
-- Table structure for li_topic_item
-- ----------------------------
DROP TABLE IF EXISTS `li_topic_item`;
CREATE TABLE `li_topic_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `comment` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_topic_item
-- ----------------------------

-- ----------------------------
-- Table structure for li_user
-- ----------------------------
DROP TABLE IF EXISTS `li_user`;
CREATE TABLE `li_user` (
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `role` int(255) DEFAULT '4',
  `openid` varchar(255) DEFAULT NULL COMMENT '第三方登录标识',
  `pic` varchar(255) DEFAULT '' COMMENT '头像',
  `way` varchar(255) DEFAULT 'site' COMMENT '登录方式',
  `point` varchar(255) DEFAULT '10' COMMENT '积分',
  `sign` text COMMENT '个性签名',
  `createtime` datetime DEFAULT NULL,
  `level` int(11) DEFAULT '1' COMMENT '等级',
  `vip` int(11) DEFAULT '0' COMMENT 'vip',
  `isverify` int(11) DEFAULT '0' COMMENT '是否已验证邮箱',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=86 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_user
-- ----------------------------
INSERT INTO `li_user` VALUES ('56', 'admin', 'admin', 'f6e39087993c9038e6bd16c6506d6c1c', '876753183@qq.com', '1', null, 'common/images/pic/avatar_7.jpg', 'site', '15', null, '2016-08-22 14:44:32', '1', '0', '0');

-- ----------------------------
-- Table structure for li_user_collect
-- ----------------------------
DROP TABLE IF EXISTS `li_user_collect`;
CREATE TABLE `li_user_collect` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(255) DEFAULT NULL COMMENT '类型',
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `author` varchar(255) DEFAULT NULL,
  `createtime` datetime DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `aid` int(11) DEFAULT NULL COMMENT '文章id',
  `iscollect` int(11) DEFAULT '1' COMMENT '是否收藏',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of li_user_collect
-- ----------------------------
